// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/tti/tenant.proto

package ttipb

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	ttnpb "go.thethings.network/lorawan-stack/v3/pkg/ttnpb"
	go_thethings_network_lorawan_stack_v3_pkg_types "go.thethings.network/lorawan-stack/v3/pkg/types"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Tenant is the message that defines a Tenant in the network.
type Tenant struct {
	TenantIdentifiers `protobuf:"bytes,1,opt,name=ids,proto3,embedded=ids" json:"ids"`
	CreatedAt         time.Time            `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at"`
	UpdatedAt         time.Time            `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at"`
	Name              string               `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Description       string               `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Attributes        map[string]string    `protobuf:"bytes,6,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ContactInfo       []*ttnpb.ContactInfo `protobuf:"bytes,7,rep,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`
	// If set, restricts the maximum number of applications that can be created.
	MaxApplications *types.UInt64Value `protobuf:"bytes,10,opt,name=max_applications,json=maxApplications,proto3" json:"max_applications,omitempty"`
	// If set, restricts the maximum number of clients that can be created.
	MaxClients *types.UInt64Value `protobuf:"bytes,11,opt,name=max_clients,json=maxClients,proto3" json:"max_clients,omitempty"`
	// If set, restricts the maximum number of end_devices that can be created.
	MaxEndDevices *types.UInt64Value `protobuf:"bytes,12,opt,name=max_end_devices,json=maxEndDevices,proto3" json:"max_end_devices,omitempty"`
	// If set, restricts the maximum number of gateways that can be created.
	MaxGateways *types.UInt64Value `protobuf:"bytes,13,opt,name=max_gateways,json=maxGateways,proto3" json:"max_gateways,omitempty"`
	// If set, restricts the maximum number of organizations that can be created.
	MaxOrganizations *types.UInt64Value `protobuf:"bytes,14,opt,name=max_organizations,json=maxOrganizations,proto3" json:"max_organizations,omitempty"`
	// If set, restricts the maximum number of users that can be created.
	MaxUsers *types.UInt64Value `protobuf:"bytes,15,opt,name=max_users,json=maxUsers,proto3" json:"max_users,omitempty"`
	// The reviewing state of the tenant.
	// This field can only be modified by tenant admins.
	State                ttnpb.State         `protobuf:"varint,8,opt,name=state,proto3,enum=ttn.lorawan.v3.State" json:"state,omitempty"`
	Capabilities         types.Struct        `protobuf:"bytes,9,opt,name=capabilities,proto3" json:"capabilities"`
	Configuration        *Configuration      `protobuf:"bytes,16,opt,name=configuration,proto3" json:"configuration,omitempty"`
	Billing              *Billing            `protobuf:"bytes,17,opt,name=billing,proto3" json:"billing,omitempty"`
	BillingIdentifiers   *BillingIdentifiers `protobuf:"bytes,18,opt,name=billing_identifiers,json=billingIdentifiers,proto3" json:"billing_identifiers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Tenant) Reset()      { *m = Tenant{} }
func (*Tenant) ProtoMessage() {}
func (*Tenant) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2ae00655d4b280, []int{0}
}
func (m *Tenant) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tenant) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tenant.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tenant) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tenant.Merge(m, src)
}
func (m *Tenant) XXX_Size() int {
	return m.Size()
}
func (m *Tenant) XXX_DiscardUnknown() {
	xxx_messageInfo_Tenant.DiscardUnknown(m)
}

var xxx_messageInfo_Tenant proto.InternalMessageInfo

func (m *Tenant) GetCreatedAt() time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return time.Time{}
}

func (m *Tenant) GetUpdatedAt() time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return time.Time{}
}

func (m *Tenant) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Tenant) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Tenant) GetAttributes() map[string]string {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *Tenant) GetContactInfo() []*ttnpb.ContactInfo {
	if m != nil {
		return m.ContactInfo
	}
	return nil
}

func (m *Tenant) GetMaxApplications() *types.UInt64Value {
	if m != nil {
		return m.MaxApplications
	}
	return nil
}

func (m *Tenant) GetMaxClients() *types.UInt64Value {
	if m != nil {
		return m.MaxClients
	}
	return nil
}

func (m *Tenant) GetMaxEndDevices() *types.UInt64Value {
	if m != nil {
		return m.MaxEndDevices
	}
	return nil
}

func (m *Tenant) GetMaxGateways() *types.UInt64Value {
	if m != nil {
		return m.MaxGateways
	}
	return nil
}

func (m *Tenant) GetMaxOrganizations() *types.UInt64Value {
	if m != nil {
		return m.MaxOrganizations
	}
	return nil
}

func (m *Tenant) GetMaxUsers() *types.UInt64Value {
	if m != nil {
		return m.MaxUsers
	}
	return nil
}

func (m *Tenant) GetState() ttnpb.State {
	if m != nil {
		return m.State
	}
	return ttnpb.STATE_REQUESTED
}

func (m *Tenant) GetCapabilities() types.Struct {
	if m != nil {
		return m.Capabilities
	}
	return types.Struct{}
}

func (m *Tenant) GetConfiguration() *Configuration {
	if m != nil {
		return m.Configuration
	}
	return nil
}

func (m *Tenant) GetBilling() *Billing {
	if m != nil {
		return m.Billing
	}
	return nil
}

func (m *Tenant) GetBillingIdentifiers() *BillingIdentifiers {
	if m != nil {
		return m.BillingIdentifiers
	}
	return nil
}

type Tenants struct {
	Tenants              []*Tenant `protobuf:"bytes,1,rep,name=tenants,proto3" json:"tenants,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Tenants) Reset()      { *m = Tenants{} }
func (*Tenants) ProtoMessage() {}
func (*Tenants) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2ae00655d4b280, []int{1}
}
func (m *Tenants) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tenants) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tenants.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tenants) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tenants.Merge(m, src)
}
func (m *Tenants) XXX_Size() int {
	return m.Size()
}
func (m *Tenants) XXX_DiscardUnknown() {
	xxx_messageInfo_Tenants.DiscardUnknown(m)
}

var xxx_messageInfo_Tenants proto.InternalMessageInfo

func (m *Tenants) GetTenants() []*Tenant {
	if m != nil {
		return m.Tenants
	}
	return nil
}

type GetTenantRequest struct {
	TenantIdentifiers    `protobuf:"bytes,1,opt,name=tenant_ids,json=tenantIds,proto3,embedded=tenant_ids" json:"tenant_ids"`
	FieldMask            types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetTenantRequest) Reset()      { *m = GetTenantRequest{} }
func (*GetTenantRequest) ProtoMessage() {}
func (*GetTenantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2ae00655d4b280, []int{2}
}
func (m *GetTenantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTenantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTenantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTenantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTenantRequest.Merge(m, src)
}
func (m *GetTenantRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTenantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTenantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTenantRequest proto.InternalMessageInfo

func (m *GetTenantRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

type ListTenantsRequest struct {
	FieldMask types.FieldMask `protobuf:"bytes,1,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask"`
	// Order the results by this field path (must be present in the field mask).
	// Default ordering is by ID. Prepend with a minus (-) to reverse the order.
	Order string `protobuf:"bytes,2,opt,name=order,proto3" json:"order,omitempty"`
	// Limit the number of results per page.
	Limit uint32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// Page number for pagination. 0 is interpreted as 1.
	Page                 uint32   `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListTenantsRequest) Reset()      { *m = ListTenantsRequest{} }
func (*ListTenantsRequest) ProtoMessage() {}
func (*ListTenantsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2ae00655d4b280, []int{3}
}
func (m *ListTenantsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListTenantsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListTenantsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListTenantsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListTenantsRequest.Merge(m, src)
}
func (m *ListTenantsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListTenantsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListTenantsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListTenantsRequest proto.InternalMessageInfo

func (m *ListTenantsRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

func (m *ListTenantsRequest) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *ListTenantsRequest) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListTenantsRequest) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

type CreateTenantRequest struct {
	Tenant               `protobuf:"bytes,1,opt,name=tenant,proto3,embedded=tenant" json:"tenant"`
	InitialUser          *ttnpb.User `protobuf:"bytes,2,opt,name=initial_user,json=initialUser,proto3" json:"initial_user,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CreateTenantRequest) Reset()      { *m = CreateTenantRequest{} }
func (*CreateTenantRequest) ProtoMessage() {}
func (*CreateTenantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2ae00655d4b280, []int{4}
}
func (m *CreateTenantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateTenantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateTenantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateTenantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateTenantRequest.Merge(m, src)
}
func (m *CreateTenantRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateTenantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateTenantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateTenantRequest proto.InternalMessageInfo

func (m *CreateTenantRequest) GetInitialUser() *ttnpb.User {
	if m != nil {
		return m.InitialUser
	}
	return nil
}

type UpdateTenantRequest struct {
	Tenant               `protobuf:"bytes,1,opt,name=tenant,proto3,embedded=tenant" json:"tenant"`
	FieldMask            types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *UpdateTenantRequest) Reset()      { *m = UpdateTenantRequest{} }
func (*UpdateTenantRequest) ProtoMessage() {}
func (*UpdateTenantRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2ae00655d4b280, []int{5}
}
func (m *UpdateTenantRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateTenantRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateTenantRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateTenantRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateTenantRequest.Merge(m, src)
}
func (m *UpdateTenantRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateTenantRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateTenantRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateTenantRequest proto.InternalMessageInfo

func (m *UpdateTenantRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

type GetTenantIdentifiersForEndDeviceEUIsRequest struct {
	JoinEUI              go_thethings_network_lorawan_stack_v3_pkg_types.EUI64 `protobuf:"bytes,1,opt,name=join_eui,json=joinEui,proto3,customtype=go.thethings.network/lorawan-stack/v3/pkg/types.EUI64" json:"join_eui"`
	DevEUI               go_thethings_network_lorawan_stack_v3_pkg_types.EUI64 `protobuf:"bytes,2,opt,name=dev_eui,json=devEui,proto3,customtype=go.thethings.network/lorawan-stack/v3/pkg/types.EUI64" json:"dev_eui"`
	XXX_NoUnkeyedLiteral struct{}                                              `json:"-"`
	XXX_sizecache        int32                                                 `json:"-"`
}

func (m *GetTenantIdentifiersForEndDeviceEUIsRequest) Reset() {
	*m = GetTenantIdentifiersForEndDeviceEUIsRequest{}
}
func (*GetTenantIdentifiersForEndDeviceEUIsRequest) ProtoMessage() {}
func (*GetTenantIdentifiersForEndDeviceEUIsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2ae00655d4b280, []int{6}
}
func (m *GetTenantIdentifiersForEndDeviceEUIsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTenantIdentifiersForEndDeviceEUIsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTenantIdentifiersForEndDeviceEUIsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTenantIdentifiersForEndDeviceEUIsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTenantIdentifiersForEndDeviceEUIsRequest.Merge(m, src)
}
func (m *GetTenantIdentifiersForEndDeviceEUIsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTenantIdentifiersForEndDeviceEUIsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTenantIdentifiersForEndDeviceEUIsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTenantIdentifiersForEndDeviceEUIsRequest proto.InternalMessageInfo

type GetTenantIdentifiersForGatewayEUIRequest struct {
	EUI                  go_thethings_network_lorawan_stack_v3_pkg_types.EUI64 `protobuf:"bytes,1,opt,name=eui,proto3,customtype=go.thethings.network/lorawan-stack/v3/pkg/types.EUI64" json:"eui"`
	XXX_NoUnkeyedLiteral struct{}                                              `json:"-"`
	XXX_sizecache        int32                                                 `json:"-"`
}

func (m *GetTenantIdentifiersForGatewayEUIRequest) Reset() {
	*m = GetTenantIdentifiersForGatewayEUIRequest{}
}
func (*GetTenantIdentifiersForGatewayEUIRequest) ProtoMessage() {}
func (*GetTenantIdentifiersForGatewayEUIRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2ae00655d4b280, []int{7}
}
func (m *GetTenantIdentifiersForGatewayEUIRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTenantIdentifiersForGatewayEUIRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTenantIdentifiersForGatewayEUIRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTenantIdentifiersForGatewayEUIRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTenantIdentifiersForGatewayEUIRequest.Merge(m, src)
}
func (m *GetTenantIdentifiersForGatewayEUIRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTenantIdentifiersForGatewayEUIRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTenantIdentifiersForGatewayEUIRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTenantIdentifiersForGatewayEUIRequest proto.InternalMessageInfo

type GetTenantIdentifiersForBillingIdentifiersRequest struct {
	BillingIdentifiers   `protobuf:"bytes,1,opt,name=ids,proto3,embedded=ids" json:"ids"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetTenantIdentifiersForBillingIdentifiersRequest) Reset() {
	*m = GetTenantIdentifiersForBillingIdentifiersRequest{}
}
func (*GetTenantIdentifiersForBillingIdentifiersRequest) ProtoMessage() {}
func (*GetTenantIdentifiersForBillingIdentifiersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2ae00655d4b280, []int{8}
}
func (m *GetTenantIdentifiersForBillingIdentifiersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTenantIdentifiersForBillingIdentifiersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTenantIdentifiersForBillingIdentifiersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTenantIdentifiersForBillingIdentifiersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTenantIdentifiersForBillingIdentifiersRequest.Merge(m, src)
}
func (m *GetTenantIdentifiersForBillingIdentifiersRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTenantIdentifiersForBillingIdentifiersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTenantIdentifiersForBillingIdentifiersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTenantIdentifiersForBillingIdentifiersRequest proto.InternalMessageInfo

type GetTenantRegistryTotalsRequest struct {
	*TenantIdentifiers   `protobuf:"bytes,1,opt,name=tenant_ids,json=tenantIds,proto3,embedded=tenant_ids" json:"tenant_ids,omitempty"`
	FieldMask            types.FieldMask `protobuf:"bytes,2,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GetTenantRegistryTotalsRequest) Reset()      { *m = GetTenantRegistryTotalsRequest{} }
func (*GetTenantRegistryTotalsRequest) ProtoMessage() {}
func (*GetTenantRegistryTotalsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2ae00655d4b280, []int{9}
}
func (m *GetTenantRegistryTotalsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTenantRegistryTotalsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTenantRegistryTotalsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTenantRegistryTotalsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTenantRegistryTotalsRequest.Merge(m, src)
}
func (m *GetTenantRegistryTotalsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTenantRegistryTotalsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTenantRegistryTotalsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTenantRegistryTotalsRequest proto.InternalMessageInfo

func (m *GetTenantRegistryTotalsRequest) GetFieldMask() types.FieldMask {
	if m != nil {
		return m.FieldMask
	}
	return types.FieldMask{}
}

type TenantRegistryTotals struct {
	Applications         uint64   `protobuf:"varint,1,opt,name=applications,proto3" json:"applications,omitempty"`
	Clients              uint64   `protobuf:"varint,2,opt,name=clients,proto3" json:"clients,omitempty"`
	EndDevices           uint64   `protobuf:"varint,3,opt,name=end_devices,json=endDevices,proto3" json:"end_devices,omitempty"`
	Gateways             uint64   `protobuf:"varint,4,opt,name=gateways,proto3" json:"gateways,omitempty"`
	Organizations        uint64   `protobuf:"varint,5,opt,name=organizations,proto3" json:"organizations,omitempty"`
	Users                uint64   `protobuf:"varint,6,opt,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TenantRegistryTotals) Reset()      { *m = TenantRegistryTotals{} }
func (*TenantRegistryTotals) ProtoMessage() {}
func (*TenantRegistryTotals) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b2ae00655d4b280, []int{10}
}
func (m *TenantRegistryTotals) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TenantRegistryTotals) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TenantRegistryTotals.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TenantRegistryTotals) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TenantRegistryTotals.Merge(m, src)
}
func (m *TenantRegistryTotals) XXX_Size() int {
	return m.Size()
}
func (m *TenantRegistryTotals) XXX_DiscardUnknown() {
	xxx_messageInfo_TenantRegistryTotals.DiscardUnknown(m)
}

var xxx_messageInfo_TenantRegistryTotals proto.InternalMessageInfo

func (m *TenantRegistryTotals) GetApplications() uint64 {
	if m != nil {
		return m.Applications
	}
	return 0
}

func (m *TenantRegistryTotals) GetClients() uint64 {
	if m != nil {
		return m.Clients
	}
	return 0
}

func (m *TenantRegistryTotals) GetEndDevices() uint64 {
	if m != nil {
		return m.EndDevices
	}
	return 0
}

func (m *TenantRegistryTotals) GetGateways() uint64 {
	if m != nil {
		return m.Gateways
	}
	return 0
}

func (m *TenantRegistryTotals) GetOrganizations() uint64 {
	if m != nil {
		return m.Organizations
	}
	return 0
}

func (m *TenantRegistryTotals) GetUsers() uint64 {
	if m != nil {
		return m.Users
	}
	return 0
}

func init() {
	proto.RegisterType((*Tenant)(nil), "tti.lorawan.v3.Tenant")
	golang_proto.RegisterType((*Tenant)(nil), "tti.lorawan.v3.Tenant")
	proto.RegisterMapType((map[string]string)(nil), "tti.lorawan.v3.Tenant.AttributesEntry")
	golang_proto.RegisterMapType((map[string]string)(nil), "tti.lorawan.v3.Tenant.AttributesEntry")
	proto.RegisterType((*Tenants)(nil), "tti.lorawan.v3.Tenants")
	golang_proto.RegisterType((*Tenants)(nil), "tti.lorawan.v3.Tenants")
	proto.RegisterType((*GetTenantRequest)(nil), "tti.lorawan.v3.GetTenantRequest")
	golang_proto.RegisterType((*GetTenantRequest)(nil), "tti.lorawan.v3.GetTenantRequest")
	proto.RegisterType((*ListTenantsRequest)(nil), "tti.lorawan.v3.ListTenantsRequest")
	golang_proto.RegisterType((*ListTenantsRequest)(nil), "tti.lorawan.v3.ListTenantsRequest")
	proto.RegisterType((*CreateTenantRequest)(nil), "tti.lorawan.v3.CreateTenantRequest")
	golang_proto.RegisterType((*CreateTenantRequest)(nil), "tti.lorawan.v3.CreateTenantRequest")
	proto.RegisterType((*UpdateTenantRequest)(nil), "tti.lorawan.v3.UpdateTenantRequest")
	golang_proto.RegisterType((*UpdateTenantRequest)(nil), "tti.lorawan.v3.UpdateTenantRequest")
	proto.RegisterType((*GetTenantIdentifiersForEndDeviceEUIsRequest)(nil), "tti.lorawan.v3.GetTenantIdentifiersForEndDeviceEUIsRequest")
	golang_proto.RegisterType((*GetTenantIdentifiersForEndDeviceEUIsRequest)(nil), "tti.lorawan.v3.GetTenantIdentifiersForEndDeviceEUIsRequest")
	proto.RegisterType((*GetTenantIdentifiersForGatewayEUIRequest)(nil), "tti.lorawan.v3.GetTenantIdentifiersForGatewayEUIRequest")
	golang_proto.RegisterType((*GetTenantIdentifiersForGatewayEUIRequest)(nil), "tti.lorawan.v3.GetTenantIdentifiersForGatewayEUIRequest")
	proto.RegisterType((*GetTenantIdentifiersForBillingIdentifiersRequest)(nil), "tti.lorawan.v3.GetTenantIdentifiersForBillingIdentifiersRequest")
	golang_proto.RegisterType((*GetTenantIdentifiersForBillingIdentifiersRequest)(nil), "tti.lorawan.v3.GetTenantIdentifiersForBillingIdentifiersRequest")
	proto.RegisterType((*GetTenantRegistryTotalsRequest)(nil), "tti.lorawan.v3.GetTenantRegistryTotalsRequest")
	golang_proto.RegisterType((*GetTenantRegistryTotalsRequest)(nil), "tti.lorawan.v3.GetTenantRegistryTotalsRequest")
	proto.RegisterType((*TenantRegistryTotals)(nil), "tti.lorawan.v3.TenantRegistryTotals")
	golang_proto.RegisterType((*TenantRegistryTotals)(nil), "tti.lorawan.v3.TenantRegistryTotals")
}

func init() {
	proto.RegisterFile("lorawan-stack/api/tti/tenant.proto", fileDescriptor_0b2ae00655d4b280)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/tti/tenant.proto", fileDescriptor_0b2ae00655d4b280)
}

var fileDescriptor_0b2ae00655d4b280 = []byte{
	// 1432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x4d, 0x6c, 0x13, 0x47,
	0x14, 0xde, 0x89, 0xed, 0x38, 0x1e, 0x27, 0x24, 0x0c, 0xb4, 0x5d, 0x05, 0x98, 0xa4, 0x6e, 0x44,
	0x03, 0xc5, 0x36, 0x0d, 0x3f, 0x2d, 0x54, 0x34, 0x8d, 0x13, 0x93, 0xa6, 0x6a, 0x55, 0x69, 0x21,
	0x1c, 0x40, 0xd4, 0x1d, 0xef, 0x4e, 0x96, 0x69, 0xec, 0xdd, 0xed, 0xee, 0xd8, 0x49, 0xa8, 0x2a,
	0x21, 0x4e, 0xa8, 0x27, 0x8e, 0xa8, 0xa7, 0x5e, 0xaa, 0xd2, 0x1b, 0x47, 0x8e, 0x1c, 0xb9, 0x54,
	0xca, 0x11, 0xf5, 0x90, 0x92, 0xb5, 0x2a, 0x71, 0x44, 0x6a, 0x0f, 0x28, 0xa7, 0x6a, 0x66, 0x77,
	0x93, 0xf5, 0x4f, 0xa4, 0xd0, 0x70, 0xda, 0x9d, 0x79, 0xdf, 0xfb, 0xde, 0x9b, 0xf7, 0x66, 0xbe,
	0x19, 0x98, 0xab, 0xd9, 0x2e, 0x59, 0x21, 0x56, 0xde, 0xe3, 0x44, 0x5f, 0x2e, 0x12, 0x87, 0x15,
	0x39, 0x67, 0x45, 0x4e, 0x2d, 0x62, 0xf1, 0x82, 0xe3, 0xda, 0xdc, 0x46, 0x07, 0x38, 0x67, 0x85,
	0x10, 0x57, 0x68, 0x9e, 0x19, 0x9d, 0x31, 0x19, 0xbf, 0xd5, 0xa8, 0x16, 0x74, 0xbb, 0x5e, 0xa4,
	0x56, 0xd3, 0x5e, 0x73, 0x5c, 0x7b, 0x75, 0xad, 0x28, 0xc1, 0x7a, 0xde, 0xa4, 0x56, 0xbe, 0x49,
	0x6a, 0xcc, 0x20, 0x9c, 0x16, 0xbb, 0x7e, 0x02, 0xca, 0xd1, 0x7c, 0x8c, 0xc2, 0xb4, 0x4d, 0x3b,
	0x70, 0xae, 0x36, 0x96, 0xe4, 0x48, 0x0e, 0xe4, 0x5f, 0x08, 0x1f, 0x37, 0x6d, 0xdb, 0xac, 0xd1,
	0x1d, 0xd4, 0x12, 0xa3, 0x35, 0xa3, 0x52, 0x27, 0xde, 0x72, 0x88, 0x38, 0xda, 0x89, 0xf0, 0xb8,
	0xdb, 0xd0, 0xc3, 0x15, 0x8c, 0x8e, 0x75, 0x5a, 0x39, 0xab, 0x53, 0x8f, 0x93, 0xba, 0x13, 0x02,
	0x70, 0x27, 0x60, 0xc5, 0x25, 0x8e, 0x43, 0x5d, 0x2f, 0xa2, 0xef, 0x2e, 0x53, 0xc3, 0xa3, 0x6e,
	0x68, 0x9d, 0xe8, 0xb6, 0xea, 0xb6, 0xc5, 0x89, 0xce, 0x2b, 0xcc, 0x5a, 0x8a, 0x16, 0x71, 0xac,
	0x1b, 0x45, 0xad, 0x46, 0x3d, 0x0a, 0xf1, 0x5e, 0xef, 0x4e, 0x54, 0x59, 0xad, 0xc6, 0x2c, 0x33,
	0x04, 0x9d, 0xe8, 0x0d, 0xd2, 0x6d, 0x6b, 0x89, 0x99, 0x0d, 0x97, 0x70, 0x66, 0x5b, 0x21, 0xf4,
	0xfd, 0xde, 0x50, 0x66, 0x50, 0x8b, 0xb3, 0x25, 0xb6, 0xbd, 0xb6, 0xdc, 0x3f, 0x19, 0xd8, 0x7f,
	0x55, 0xf6, 0x1b, 0x95, 0x61, 0x82, 0x19, 0x9e, 0x0a, 0xc6, 0xc1, 0x64, 0x76, 0xea, 0xdd, 0x42,
	0x7b, 0xdf, 0x0b, 0x01, 0x68, 0x61, 0x87, 0xa0, 0x34, 0xb2, 0x55, 0x4a, 0xfd, 0x04, 0xfa, 0x46,
	0xc0, 0xd3, 0x8d, 0x31, 0x65, 0x7d, 0x63, 0x0c, 0x68, 0xc2, 0x1f, 0xcd, 0x42, 0xa8, 0xbb, 0x94,
	0x70, 0x6a, 0x54, 0x08, 0x57, 0xfb, 0x24, 0xdb, 0x68, 0x21, 0x28, 0x71, 0x21, 0x2a, 0x71, 0xe1,
	0x6a, 0xd4, 0x83, 0xd2, 0x80, 0x70, 0xbf, 0xff, 0xd7, 0x18, 0xd0, 0x32, 0xa1, 0xdf, 0x0c, 0x17,
	0x24, 0x0d, 0xc7, 0x88, 0x48, 0x12, 0xaf, 0x43, 0x12, 0xfa, 0xcd, 0x70, 0x74, 0x04, 0x26, 0x2d,
	0x52, 0xa7, 0x6a, 0x72, 0x1c, 0x4c, 0x66, 0x4a, 0xe9, 0xad, 0x52, 0xd2, 0xed, 0x53, 0xa7, 0x34,
	0x39, 0x89, 0x4e, 0xc2, 0xac, 0x41, 0x3d, 0xdd, 0x65, 0x8e, 0x28, 0x9b, 0x9a, 0x92, 0x98, 0x81,
	0xad, 0x52, 0xca, 0x4d, 0xa8, 0xeb, 0xc3, 0x5a, 0xdc, 0x88, 0x38, 0x84, 0x84, 0x73, 0x97, 0x55,
	0x1b, 0x9c, 0x7a, 0x6a, 0xff, 0x78, 0x62, 0x32, 0x3b, 0x75, 0xbc, 0x77, 0x81, 0x0a, 0x33, 0xdb,
	0xc0, 0xb2, 0xc5, 0xdd, 0xb5, 0xd2, 0xa9, 0xad, 0xd2, 0x89, 0x9f, 0xc1, 0xf1, 0xdc, 0x84, 0x9b,
	0x53, 0x27, 0xa6, 0xf0, 0x37, 0x37, 0x48, 0xfe, 0xf6, 0xe9, 0xfc, 0x85, 0x9b, 0x93, 0xd3, 0x17,
	0x6f, 0xe4, 0x6f, 0x4e, 0x47, 0xc3, 0x13, 0x3f, 0x4c, 0x9d, 0xfa, 0x71, 0x42, 0x8b, 0xc5, 0x41,
	0x9f, 0xc2, 0xc1, 0xf8, 0x46, 0x52, 0xd3, 0x32, 0xee, 0x91, 0x02, 0xe7, 0x56, 0x3c, 0xee, 0x6c,
	0x80, 0x59, 0xb0, 0x96, 0x6c, 0x2d, 0xab, 0xef, 0x0c, 0xd0, 0x3c, 0x1c, 0xa9, 0x93, 0xd5, 0x0a,
	0x71, 0x9c, 0x1a, 0xd3, 0xe5, 0xe6, 0xf0, 0x54, 0x28, 0x2b, 0x79, 0xb4, 0xab, 0x92, 0x8b, 0x0b,
	0x16, 0x3f, 0x7f, 0xf6, 0x1a, 0xa9, 0x35, 0xa8, 0x36, 0x5c, 0x27, 0xab, 0x33, 0x31, 0x27, 0x74,
	0x09, 0x66, 0x05, 0x91, 0x5e, 0x63, 0xd4, 0xe2, 0x9e, 0x9a, 0xdd, 0x03, 0x07, 0xac, 0x93, 0xd5,
	0xd9, 0x00, 0x8f, 0xe6, 0xa0, 0x60, 0xac, 0x50, 0xcb, 0xa8, 0x18, 0xb4, 0xc9, 0x74, 0xea, 0xa9,
	0x83, 0x7b, 0xa0, 0x18, 0xaa, 0x93, 0xd5, 0xb2, 0x65, 0xcc, 0x05, 0x2e, 0x68, 0x1a, 0x0e, 0x0a,
	0x16, 0x93, 0x70, 0xba, 0x42, 0xd6, 0x3c, 0x75, 0x68, 0x0f, 0x14, 0x22, 0xed, 0xf9, 0xd0, 0x01,
	0x2d, 0xc0, 0x83, 0x82, 0xc0, 0x76, 0x4d, 0x62, 0xb1, 0xdb, 0x61, 0x3d, 0x0e, 0xec, 0x81, 0x45,
	0x54, 0xf1, 0xeb, 0xb8, 0x17, 0xba, 0x00, 0x33, 0x82, 0x4a, 0x88, 0x80, 0xa7, 0x0e, 0xef, 0x81,
	0x62, 0xa0, 0x4e, 0x56, 0x17, 0x05, 0x1a, 0x9d, 0x83, 0x29, 0x8f, 0x13, 0x4e, 0xd5, 0x81, 0x71,
	0x30, 0x79, 0x60, 0xea, 0xad, 0xce, 0x6e, 0x5e, 0x11, 0x46, 0xb9, 0x0f, 0xef, 0x8a, 0xa3, 0xa5,
	0x05, 0x68, 0x34, 0x03, 0x07, 0x75, 0xe2, 0x90, 0x2a, 0xab, 0x31, 0xce, 0xa8, 0xa7, 0x66, 0x64,
	0xd0, 0x77, 0xba, 0x82, 0x5e, 0x91, 0xc2, 0x57, 0x4a, 0x8a, 0xe3, 0xa0, 0xb5, 0xb9, 0xa0, 0x59,
	0x38, 0xd4, 0xa6, 0x14, 0xea, 0x88, 0xe4, 0x38, 0xd6, 0xb9, 0x8f, 0x67, 0xe3, 0x20, 0xad, 0xdd,
	0x07, 0x7d, 0x08, 0xd3, 0xa1, 0x26, 0xa9, 0x07, 0xc3, 0x14, 0x3a, 0xdc, 0x4b, 0x81, 0x59, 0x8b,
	0x70, 0xe8, 0x0a, 0x3c, 0x14, 0xfe, 0x56, 0x62, 0xf2, 0xa3, 0x22, 0xe9, 0x9e, 0xdb, 0xc5, 0x3d,
	0xa6, 0x33, 0x1a, 0xaa, 0x76, 0xcd, 0x8d, 0x5e, 0x82, 0xc3, 0x1d, 0x07, 0x0d, 0x8d, 0xc0, 0xc4,
	0x32, 0x5d, 0x93, 0xf2, 0x95, 0xd1, 0xc4, 0x2f, 0x3a, 0x0c, 0x53, 0x4d, 0x51, 0x7e, 0x29, 0x42,
	0x19, 0x2d, 0x18, 0x5c, 0xec, 0xfb, 0x18, 0xe4, 0x3e, 0x81, 0xe9, 0xe0, 0xb8, 0x7a, 0xe8, 0x34,
	0x4c, 0x07, 0xf7, 0x9d, 0x50, 0x3e, 0x71, 0xc0, 0xde, 0xee, 0x7d, 0xb0, 0xb5, 0x08, 0x96, 0xfb,
	0x0d, 0xc0, 0x91, 0x79, 0xca, 0xc3, 0x69, 0xfa, 0x7d, 0x83, 0x7a, 0x1c, 0x69, 0x10, 0x06, 0xf6,
	0xca, 0x3e, 0x35, 0x34, 0xc3, 0x43, 0x90, 0xd8, 0xf2, 0x70, 0xe7, 0xaa, 0xdb, 0x55, 0x49, 0x2f,
	0x0b, 0xc8, 0x57, 0xc4, 0x5b, 0x0e, 0xbb, 0x9e, 0x59, 0x8a, 0x26, 0x72, 0x7f, 0x03, 0x88, 0xbe,
	0x64, 0x5e, 0x98, 0xaa, 0x17, 0xe5, 0xda, 0xce, 0x0b, 0x5e, 0x9b, 0x17, 0x5d, 0x87, 0x29, 0xdb,
	0x35, 0xa8, 0x1b, 0x14, 0xb6, 0x34, 0xb7, 0x55, 0x9a, 0x71, 0xa7, 0x35, 0x25, 0xca, 0xbd, 0xc2,
	0x0c, 0x0d, 0xe6, 0x77, 0xfe, 0xa5, 0xe0, 0x6a, 0xa9, 0xbc, 0xfc, 0xc4, 0x2e, 0x07, 0x2d, 0x9b,
	0x8f, 0x0d, 0x02, 0x4a, 0x84, 0x61, 0xaa, 0xc6, 0xea, 0x2c, 0x10, 0xfd, 0x21, 0x79, 0x12, 0x4e,
	0x26, 0xd4, 0x17, 0x69, 0x2d, 0x98, 0x46, 0x08, 0x26, 0x1d, 0x62, 0x06, 0xa2, 0x3e, 0xa4, 0xc9,
	0xff, 0xdc, 0x7d, 0x00, 0x0f, 0xcd, 0x4a, 0xa6, 0xf6, 0xa6, 0x7c, 0x06, 0xfb, 0x83, 0x2c, 0xc2,
	0x45, 0xee, 0xd2, 0xda, 0x1e, 0x5d, 0x08, 0xfd, 0xd0, 0x47, 0x70, 0x90, 0x59, 0x8c, 0x33, 0x52,
	0x93, 0xa7, 0x3d, 0x6c, 0xc2, 0xe1, 0xce, 0x53, 0x2b, 0xce, 0xb6, 0x96, 0x0d, 0x91, 0x62, 0x90,
	0x7b, 0x00, 0xe0, 0xa1, 0x45, 0x79, 0x13, 0xbd, 0xe9, 0x94, 0xf6, 0xbd, 0x2b, 0xfe, 0x05, 0xf0,
	0x83, 0xed, 0xfd, 0x1b, 0xdb, 0x8c, 0x97, 0x6d, 0x77, 0x5b, 0x6f, 0xcb, 0x8b, 0x0b, 0xdb, 0xdb,
	0x45, 0x87, 0x03, 0xdf, 0xd9, 0xcc, 0xaa, 0xd0, 0x06, 0x93, 0x49, 0x0f, 0x96, 0x3e, 0x17, 0x94,
	0x7f, 0x6e, 0x8c, 0x9d, 0x33, 0xed, 0x02, 0xbf, 0x45, 0xf9, 0x2d, 0x66, 0x99, 0x5e, 0xc1, 0xa2,
	0x7c, 0xc5, 0x76, 0x97, 0x8b, 0xed, 0x4f, 0x8f, 0xe6, 0x99, 0xa2, 0xb3, 0x6c, 0x16, 0xf9, 0x9a,
	0x43, 0xbd, 0x42, 0x79, 0x71, 0xe1, 0xfc, 0x59, 0x7f, 0x63, 0x2c, 0xfd, 0x85, 0xcd, 0xac, 0xf2,
	0xe2, 0x82, 0x96, 0x16, 0xcc, 0xe5, 0x06, 0x43, 0xdf, 0xc2, 0xb4, 0x41, 0x9b, 0x32, 0x46, 0x9f,
	0x8c, 0x31, 0xbf, 0xdf, 0x18, 0xfd, 0x73, 0xb4, 0x29, 0x42, 0xf4, 0x1b, 0xb4, 0x59, 0x6e, 0xb0,
	0xdc, 0x5d, 0x00, 0x27, 0x77, 0x59, 0x76, 0x78, 0x47, 0x08, 0x74, 0xb8, 0xe6, 0x6b, 0x30, 0xb1,
	0xb3, 0xdc, 0xb9, 0xfd, 0xa6, 0x92, 0x10, 0xcc, 0x82, 0x30, 0x77, 0x1b, 0x9e, 0xde, 0x25, 0x87,
	0x1e, 0xc2, 0x17, 0xe6, 0x72, 0x39, 0xfe, 0x2e, 0xdb, 0x83, 0x60, 0xee, 0xf2, 0x30, 0xcb, 0xfd,
	0x0e, 0x20, 0x8e, 0xe9, 0x96, 0xc9, 0x3c, 0xee, 0xae, 0x5d, 0xb5, 0x39, 0xa9, 0xc5, 0x42, 0xfd,
	0x2f, 0x15, 0x4b, 0xbe, 0x71, 0xe5, 0xfa, 0x03, 0xc0, 0xc3, 0xbd, 0x12, 0x45, 0x39, 0x38, 0xd8,
	0xf6, 0xa0, 0x11, 0x39, 0x26, 0xb5, 0xb6, 0x39, 0xa4, 0xc2, 0x74, 0xf4, 0x56, 0xe9, 0x93, 0xe6,
	0x68, 0x88, 0xc6, 0x60, 0x36, 0xfe, 0x0c, 0x49, 0x48, 0x2b, 0xa4, 0x3b, 0xaf, 0x8c, 0x51, 0x38,
	0xb0, 0xfd, 0xc2, 0x48, 0x4a, 0xeb, 0xf6, 0x18, 0x4d, 0xc0, 0xa1, 0xf6, 0xc7, 0x43, 0x4a, 0x02,
	0xda, 0x27, 0xc5, 0xa5, 0x13, 0xbc, 0x0b, 0xfa, 0xa5, 0x35, 0x18, 0x94, 0x7e, 0x05, 0x4f, 0x37,
	0x31, 0x58, 0xdf, 0xc4, 0xe0, 0xd9, 0x26, 0x56, 0x9e, 0x6f, 0x62, 0xe5, 0xc5, 0x26, 0x56, 0x5e,
	0x6e, 0x62, 0xe5, 0xd5, 0x26, 0x06, 0x77, 0x7c, 0x0c, 0xee, 0xf9, 0x58, 0x79, 0xe8, 0x63, 0xf0,
	0xc8, 0xc7, 0xca, 0x63, 0x1f, 0x2b, 0x4f, 0x7c, 0xac, 0x3c, 0xf5, 0x31, 0x58, 0xf7, 0x31, 0x78,
	0xe6, 0x63, 0xe5, 0xb9, 0x8f, 0xc1, 0x0b, 0x1f, 0x2b, 0x2f, 0x7d, 0x0c, 0x5e, 0xf9, 0x58, 0xb9,
	0xd3, 0xc2, 0xca, 0xbd, 0x16, 0x06, 0xf7, 0x5b, 0x58, 0x79, 0xd0, 0xc2, 0xe0, 0x97, 0x16, 0x56,
	0x1e, 0xb6, 0xb0, 0xf2, 0xa8, 0x85, 0xc1, 0xe3, 0x16, 0x06, 0x4f, 0x5a, 0x18, 0x5c, 0x2f, 0xbe,
	0xc6, 0x8e, 0xe5, 0xcc, 0xa9, 0x56, 0xfb, 0x65, 0x73, 0xce, 0xfc, 0x17, 0x00, 0x00, 0xff, 0xff,
	0x39, 0xa1, 0x3f, 0xb2, 0x1a, 0x0e, 0x00, 0x00,
}

func (this *Tenant) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tenant)
	if !ok {
		that2, ok := that.(Tenant)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TenantIdentifiers.Equal(&that1.TenantIdentifiers) {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.UpdatedAt.Equal(that1.UpdatedAt) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.Attributes) != len(that1.Attributes) {
		return false
	}
	for i := range this.Attributes {
		if this.Attributes[i] != that1.Attributes[i] {
			return false
		}
	}
	if len(this.ContactInfo) != len(that1.ContactInfo) {
		return false
	}
	for i := range this.ContactInfo {
		if !this.ContactInfo[i].Equal(that1.ContactInfo[i]) {
			return false
		}
	}
	if !this.MaxApplications.Equal(that1.MaxApplications) {
		return false
	}
	if !this.MaxClients.Equal(that1.MaxClients) {
		return false
	}
	if !this.MaxEndDevices.Equal(that1.MaxEndDevices) {
		return false
	}
	if !this.MaxGateways.Equal(that1.MaxGateways) {
		return false
	}
	if !this.MaxOrganizations.Equal(that1.MaxOrganizations) {
		return false
	}
	if !this.MaxUsers.Equal(that1.MaxUsers) {
		return false
	}
	if this.State != that1.State {
		return false
	}
	if !this.Capabilities.Equal(&that1.Capabilities) {
		return false
	}
	if !this.Configuration.Equal(that1.Configuration) {
		return false
	}
	if !this.Billing.Equal(that1.Billing) {
		return false
	}
	if !this.BillingIdentifiers.Equal(that1.BillingIdentifiers) {
		return false
	}
	return true
}
func (this *Tenants) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Tenants)
	if !ok {
		that2, ok := that.(Tenants)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Tenants) != len(that1.Tenants) {
		return false
	}
	for i := range this.Tenants {
		if !this.Tenants[i].Equal(that1.Tenants[i]) {
			return false
		}
	}
	return true
}
func (this *GetTenantRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTenantRequest)
	if !ok {
		that2, ok := that.(GetTenantRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TenantIdentifiers.Equal(&that1.TenantIdentifiers) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}
func (this *ListTenantsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListTenantsRequest)
	if !ok {
		that2, ok := that.(ListTenantsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	if this.Order != that1.Order {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Page != that1.Page {
		return false
	}
	return true
}
func (this *CreateTenantRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateTenantRequest)
	if !ok {
		that2, ok := that.(CreateTenantRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Tenant.Equal(&that1.Tenant) {
		return false
	}
	if !this.InitialUser.Equal(that1.InitialUser) {
		return false
	}
	return true
}
func (this *UpdateTenantRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateTenantRequest)
	if !ok {
		that2, ok := that.(UpdateTenantRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Tenant.Equal(&that1.Tenant) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}
func (this *GetTenantIdentifiersForEndDeviceEUIsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTenantIdentifiersForEndDeviceEUIsRequest)
	if !ok {
		that2, ok := that.(GetTenantIdentifiersForEndDeviceEUIsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.JoinEUI.Equal(that1.JoinEUI) {
		return false
	}
	if !this.DevEUI.Equal(that1.DevEUI) {
		return false
	}
	return true
}
func (this *GetTenantIdentifiersForGatewayEUIRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTenantIdentifiersForGatewayEUIRequest)
	if !ok {
		that2, ok := that.(GetTenantIdentifiersForGatewayEUIRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EUI.Equal(that1.EUI) {
		return false
	}
	return true
}
func (this *GetTenantIdentifiersForBillingIdentifiersRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTenantIdentifiersForBillingIdentifiersRequest)
	if !ok {
		that2, ok := that.(GetTenantIdentifiersForBillingIdentifiersRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BillingIdentifiers.Equal(&that1.BillingIdentifiers) {
		return false
	}
	return true
}
func (this *GetTenantRegistryTotalsRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetTenantRegistryTotalsRequest)
	if !ok {
		that2, ok := that.(GetTenantRegistryTotalsRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.TenantIdentifiers.Equal(that1.TenantIdentifiers) {
		return false
	}
	if !this.FieldMask.Equal(&that1.FieldMask) {
		return false
	}
	return true
}
func (this *TenantRegistryTotals) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TenantRegistryTotals)
	if !ok {
		that2, ok := that.(TenantRegistryTotals)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Applications != that1.Applications {
		return false
	}
	if this.Clients != that1.Clients {
		return false
	}
	if this.EndDevices != that1.EndDevices {
		return false
	}
	if this.Gateways != that1.Gateways {
		return false
	}
	if this.Organizations != that1.Organizations {
		return false
	}
	if this.Users != that1.Users {
		return false
	}
	return true
}
func (m *Tenant) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tenant) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tenant) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BillingIdentifiers != nil {
		{
			size, err := m.BillingIdentifiers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTenant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if m.Billing != nil {
		{
			size, err := m.Billing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTenant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Configuration != nil {
		{
			size, err := m.Configuration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTenant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.MaxUsers != nil {
		{
			size, err := m.MaxUsers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTenant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.MaxOrganizations != nil {
		{
			size, err := m.MaxOrganizations.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTenant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x72
	}
	if m.MaxGateways != nil {
		{
			size, err := m.MaxGateways.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTenant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.MaxEndDevices != nil {
		{
			size, err := m.MaxEndDevices.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTenant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.MaxClients != nil {
		{
			size, err := m.MaxClients.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTenant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.MaxApplications != nil {
		{
			size, err := m.MaxApplications.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTenant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	{
		size, err := m.Capabilities.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTenant(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.State != 0 {
		i = encodeVarintTenant(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x40
	}
	if len(m.ContactInfo) > 0 {
		for iNdEx := len(m.ContactInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ContactInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTenant(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Attributes) > 0 {
		for k := range m.Attributes {
			v := m.Attributes[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTenant(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTenant(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTenant(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTenant(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTenant(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	n11, err11 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt):])
	if err11 != nil {
		return 0, err11
	}
	i -= n11
	i = encodeVarintTenant(dAtA, i, uint64(n11))
	i--
	dAtA[i] = 0x1a
	n12, err12 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt):])
	if err12 != nil {
		return 0, err12
	}
	i -= n12
	i = encodeVarintTenant(dAtA, i, uint64(n12))
	i--
	dAtA[i] = 0x12
	{
		size, err := m.TenantIdentifiers.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTenant(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Tenants) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tenants) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tenants) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tenants) > 0 {
		for iNdEx := len(m.Tenants) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tenants[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTenant(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetTenantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTenantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTenantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FieldMask.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTenant(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.TenantIdentifiers.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTenant(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ListTenantsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListTenantsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListTenantsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Page != 0 {
		i = encodeVarintTenant(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x20
	}
	if m.Limit != 0 {
		i = encodeVarintTenant(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Order) > 0 {
		i -= len(m.Order)
		copy(dAtA[i:], m.Order)
		i = encodeVarintTenant(dAtA, i, uint64(len(m.Order)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.FieldMask.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTenant(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CreateTenantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTenantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateTenantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InitialUser != nil {
		{
			size, err := m.InitialUser.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTenant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Tenant.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTenant(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UpdateTenantRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateTenantRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateTenantRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FieldMask.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTenant(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Tenant.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTenant(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetTenantIdentifiersForEndDeviceEUIsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTenantIdentifiersForEndDeviceEUIsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTenantIdentifiersForEndDeviceEUIsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.DevEUI.Size()
		i -= size
		if _, err := m.DevEUI.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTenant(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.JoinEUI.Size()
		i -= size
		if _, err := m.JoinEUI.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTenant(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetTenantIdentifiersForGatewayEUIRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTenantIdentifiersForGatewayEUIRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTenantIdentifiersForGatewayEUIRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.EUI.Size()
		i -= size
		if _, err := m.EUI.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTenant(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetTenantIdentifiersForBillingIdentifiersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTenantIdentifiersForBillingIdentifiersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTenantIdentifiersForBillingIdentifiersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BillingIdentifiers.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTenant(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetTenantRegistryTotalsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTenantRegistryTotalsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTenantRegistryTotalsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FieldMask.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTenant(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.TenantIdentifiers != nil {
		{
			size, err := m.TenantIdentifiers.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTenant(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TenantRegistryTotals) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TenantRegistryTotals) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TenantRegistryTotals) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Users != 0 {
		i = encodeVarintTenant(dAtA, i, m.Users)
		i--
		dAtA[i] = 0x30
	}
	if m.Organizations != 0 {
		i = encodeVarintTenant(dAtA, i, m.Organizations)
		i--
		dAtA[i] = 0x28
	}
	if m.Gateways != 0 {
		i = encodeVarintTenant(dAtA, i, m.Gateways)
		i--
		dAtA[i] = 0x20
	}
	if m.EndDevices != 0 {
		i = encodeVarintTenant(dAtA, i, m.EndDevices)
		i--
		dAtA[i] = 0x18
	}
	if m.Clients != 0 {
		i = encodeVarintTenant(dAtA, i, m.Clients)
		i--
		dAtA[i] = 0x10
	}
	if m.Applications != 0 {
		i = encodeVarintTenant(dAtA, i, m.Applications)
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTenant(dAtA []byte, offset int, v uint64) int {
	offset -= sovTenant(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedTenant(r randyTenant, easy bool) *Tenant {
	this := &Tenant{}
	v1 := NewPopulatedTenantIdentifiers(r, easy)
	this.TenantIdentifiers = *v1
	v2 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.CreatedAt = *v2
	v3 := github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	this.UpdatedAt = *v3
	this.Name = randStringTenant(r)
	this.Description = randStringTenant(r)
	if r.Intn(5) != 0 {
		v4 := r.Intn(10)
		this.Attributes = make(map[string]string)
		for i := 0; i < v4; i++ {
			this.Attributes[randStringTenant(r)] = randStringTenant(r)
		}
	}
	if r.Intn(5) != 0 {
		v5 := r.Intn(5)
		this.ContactInfo = make([]*ttnpb.ContactInfo, v5)
		for i := 0; i < v5; i++ {
			this.ContactInfo[i] = ttnpb.NewPopulatedContactInfo(r, easy)
		}
	}
	this.State = ttnpb.State([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	v6 := types.NewPopulatedStruct(r, easy)
	this.Capabilities = *v6
	if r.Intn(5) != 0 {
		this.MaxApplications = types.NewPopulatedUInt64Value(r, easy)
	}
	if r.Intn(5) != 0 {
		this.MaxClients = types.NewPopulatedUInt64Value(r, easy)
	}
	if r.Intn(5) != 0 {
		this.MaxEndDevices = types.NewPopulatedUInt64Value(r, easy)
	}
	if r.Intn(5) != 0 {
		this.MaxGateways = types.NewPopulatedUInt64Value(r, easy)
	}
	if r.Intn(5) != 0 {
		this.MaxOrganizations = types.NewPopulatedUInt64Value(r, easy)
	}
	if r.Intn(5) != 0 {
		this.MaxUsers = types.NewPopulatedUInt64Value(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Configuration = NewPopulatedConfiguration(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Billing = NewPopulatedBilling(r, easy)
	}
	if r.Intn(5) != 0 {
		this.BillingIdentifiers = NewPopulatedBillingIdentifiers(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTenants(r randyTenant, easy bool) *Tenants {
	this := &Tenants{}
	if r.Intn(5) != 0 {
		v7 := r.Intn(5)
		this.Tenants = make([]*Tenant, v7)
		for i := 0; i < v7; i++ {
			this.Tenants[i] = NewPopulatedTenant(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetTenantRequest(r randyTenant, easy bool) *GetTenantRequest {
	this := &GetTenantRequest{}
	v8 := NewPopulatedTenantIdentifiers(r, easy)
	this.TenantIdentifiers = *v8
	v9 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v9
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedListTenantsRequest(r randyTenant, easy bool) *ListTenantsRequest {
	this := &ListTenantsRequest{}
	v10 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v10
	this.Order = randStringTenant(r)
	this.Limit = r.Uint32()
	this.Page = r.Uint32()
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedCreateTenantRequest(r randyTenant, easy bool) *CreateTenantRequest {
	this := &CreateTenantRequest{}
	v11 := NewPopulatedTenant(r, easy)
	this.Tenant = *v11
	if r.Intn(5) != 0 {
		this.InitialUser = ttnpb.NewPopulatedUser(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedUpdateTenantRequest(r randyTenant, easy bool) *UpdateTenantRequest {
	this := &UpdateTenantRequest{}
	v12 := NewPopulatedTenant(r, easy)
	this.Tenant = *v12
	v13 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v13
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetTenantIdentifiersForEndDeviceEUIsRequest(r randyTenant, easy bool) *GetTenantIdentifiersForEndDeviceEUIsRequest {
	this := &GetTenantIdentifiersForEndDeviceEUIsRequest{}
	v14 := go_thethings_network_lorawan_stack_v3_pkg_types.NewPopulatedEUI64(r)
	this.JoinEUI = *v14
	v15 := go_thethings_network_lorawan_stack_v3_pkg_types.NewPopulatedEUI64(r)
	this.DevEUI = *v15
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetTenantIdentifiersForGatewayEUIRequest(r randyTenant, easy bool) *GetTenantIdentifiersForGatewayEUIRequest {
	this := &GetTenantIdentifiersForGatewayEUIRequest{}
	v16 := go_thethings_network_lorawan_stack_v3_pkg_types.NewPopulatedEUI64(r)
	this.EUI = *v16
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetTenantIdentifiersForBillingIdentifiersRequest(r randyTenant, easy bool) *GetTenantIdentifiersForBillingIdentifiersRequest {
	this := &GetTenantIdentifiersForBillingIdentifiersRequest{}
	v17 := NewPopulatedBillingIdentifiers(r, easy)
	this.BillingIdentifiers = *v17
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedGetTenantRegistryTotalsRequest(r randyTenant, easy bool) *GetTenantRegistryTotalsRequest {
	this := &GetTenantRegistryTotalsRequest{}
	if r.Intn(5) != 0 {
		this.TenantIdentifiers = NewPopulatedTenantIdentifiers(r, easy)
	}
	v18 := types.NewPopulatedFieldMask(r, easy)
	this.FieldMask = *v18
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedTenantRegistryTotals(r randyTenant, easy bool) *TenantRegistryTotals {
	this := &TenantRegistryTotals{}
	this.Applications = uint64(r.Uint32())
	this.Clients = uint64(r.Uint32())
	this.EndDevices = uint64(r.Uint32())
	this.Gateways = uint64(r.Uint32())
	this.Organizations = uint64(r.Uint32())
	this.Users = uint64(r.Uint32())
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyTenant interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneTenant(r randyTenant) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringTenant(r randyTenant) string {
	v19 := r.Intn(100)
	tmps := make([]rune, v19)
	for i := 0; i < v19; i++ {
		tmps[i] = randUTF8RuneTenant(r)
	}
	return string(tmps)
}
func randUnrecognizedTenant(r randyTenant, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldTenant(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldTenant(dAtA []byte, r randyTenant, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateTenant(dAtA, uint64(key))
		v20 := r.Int63()
		if r.Intn(2) == 0 {
			v20 *= -1
		}
		dAtA = encodeVarintPopulateTenant(dAtA, uint64(v20))
	case 1:
		dAtA = encodeVarintPopulateTenant(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateTenant(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateTenant(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateTenant(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateTenant(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Tenant) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TenantIdentifiers.Size()
	n += 1 + l + sovTenant(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CreatedAt)
	n += 1 + l + sovTenant(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UpdatedAt)
	n += 1 + l + sovTenant(uint64(l))
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTenant(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTenant(uint64(l))
	}
	if len(m.Attributes) > 0 {
		for k, v := range m.Attributes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTenant(uint64(len(k))) + 1 + len(v) + sovTenant(uint64(len(v)))
			n += mapEntrySize + 1 + sovTenant(uint64(mapEntrySize))
		}
	}
	if len(m.ContactInfo) > 0 {
		for _, e := range m.ContactInfo {
			l = e.Size()
			n += 1 + l + sovTenant(uint64(l))
		}
	}
	if m.State != 0 {
		n += 1 + sovTenant(uint64(m.State))
	}
	l = m.Capabilities.Size()
	n += 1 + l + sovTenant(uint64(l))
	if m.MaxApplications != nil {
		l = m.MaxApplications.Size()
		n += 1 + l + sovTenant(uint64(l))
	}
	if m.MaxClients != nil {
		l = m.MaxClients.Size()
		n += 1 + l + sovTenant(uint64(l))
	}
	if m.MaxEndDevices != nil {
		l = m.MaxEndDevices.Size()
		n += 1 + l + sovTenant(uint64(l))
	}
	if m.MaxGateways != nil {
		l = m.MaxGateways.Size()
		n += 1 + l + sovTenant(uint64(l))
	}
	if m.MaxOrganizations != nil {
		l = m.MaxOrganizations.Size()
		n += 1 + l + sovTenant(uint64(l))
	}
	if m.MaxUsers != nil {
		l = m.MaxUsers.Size()
		n += 1 + l + sovTenant(uint64(l))
	}
	if m.Configuration != nil {
		l = m.Configuration.Size()
		n += 2 + l + sovTenant(uint64(l))
	}
	if m.Billing != nil {
		l = m.Billing.Size()
		n += 2 + l + sovTenant(uint64(l))
	}
	if m.BillingIdentifiers != nil {
		l = m.BillingIdentifiers.Size()
		n += 2 + l + sovTenant(uint64(l))
	}
	return n
}

func (m *Tenants) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tenants) > 0 {
		for _, e := range m.Tenants {
			l = e.Size()
			n += 1 + l + sovTenant(uint64(l))
		}
	}
	return n
}

func (m *GetTenantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TenantIdentifiers.Size()
	n += 1 + l + sovTenant(uint64(l))
	l = m.FieldMask.Size()
	n += 1 + l + sovTenant(uint64(l))
	return n
}

func (m *ListTenantsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FieldMask.Size()
	n += 1 + l + sovTenant(uint64(l))
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovTenant(uint64(l))
	}
	if m.Limit != 0 {
		n += 1 + sovTenant(uint64(m.Limit))
	}
	if m.Page != 0 {
		n += 1 + sovTenant(uint64(m.Page))
	}
	return n
}

func (m *CreateTenantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Tenant.Size()
	n += 1 + l + sovTenant(uint64(l))
	if m.InitialUser != nil {
		l = m.InitialUser.Size()
		n += 1 + l + sovTenant(uint64(l))
	}
	return n
}

func (m *UpdateTenantRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Tenant.Size()
	n += 1 + l + sovTenant(uint64(l))
	l = m.FieldMask.Size()
	n += 1 + l + sovTenant(uint64(l))
	return n
}

func (m *GetTenantIdentifiersForEndDeviceEUIsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.JoinEUI.Size()
	n += 1 + l + sovTenant(uint64(l))
	l = m.DevEUI.Size()
	n += 1 + l + sovTenant(uint64(l))
	return n
}

func (m *GetTenantIdentifiersForGatewayEUIRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.EUI.Size()
	n += 1 + l + sovTenant(uint64(l))
	return n
}

func (m *GetTenantIdentifiersForBillingIdentifiersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BillingIdentifiers.Size()
	n += 1 + l + sovTenant(uint64(l))
	return n
}

func (m *GetTenantRegistryTotalsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TenantIdentifiers != nil {
		l = m.TenantIdentifiers.Size()
		n += 1 + l + sovTenant(uint64(l))
	}
	l = m.FieldMask.Size()
	n += 1 + l + sovTenant(uint64(l))
	return n
}

func (m *TenantRegistryTotals) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Applications != 0 {
		n += 1 + sovTenant(m.Applications)
	}
	if m.Clients != 0 {
		n += 1 + sovTenant(m.Clients)
	}
	if m.EndDevices != 0 {
		n += 1 + sovTenant(m.EndDevices)
	}
	if m.Gateways != 0 {
		n += 1 + sovTenant(m.Gateways)
	}
	if m.Organizations != 0 {
		n += 1 + sovTenant(m.Organizations)
	}
	if m.Users != 0 {
		n += 1 + sovTenant(m.Users)
	}
	return n
}

func sovTenant(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTenant(x uint64) (n int) {
	return sovTenant((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *Tenant) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForContactInfo := "[]*ContactInfo{"
	for _, f := range this.ContactInfo {
		repeatedStringForContactInfo += strings.Replace(fmt.Sprintf("%v", f), "ContactInfo", "ttnpb.ContactInfo", 1) + ","
	}
	repeatedStringForContactInfo += "}"
	keysForAttributes := make([]string, 0, len(this.Attributes))
	for k := range this.Attributes {
		keysForAttributes = append(keysForAttributes, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAttributes)
	mapStringForAttributes := "map[string]string{"
	for _, k := range keysForAttributes {
		mapStringForAttributes += fmt.Sprintf("%v: %v,", k, this.Attributes[k])
	}
	mapStringForAttributes += "}"
	s := strings.Join([]string{`&Tenant{`,
		`TenantIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TenantIdentifiers), "TenantIdentifiers", "TenantIdentifiers", 1), `&`, ``, 1) + `,`,
		`CreatedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`UpdatedAt:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1), `&`, ``, 1) + `,`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Attributes:` + mapStringForAttributes + `,`,
		`ContactInfo:` + repeatedStringForContactInfo + `,`,
		`State:` + fmt.Sprintf("%v", this.State) + `,`,
		`Capabilities:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Capabilities), "Struct", "types.Struct", 1), `&`, ``, 1) + `,`,
		`MaxApplications:` + strings.Replace(fmt.Sprintf("%v", this.MaxApplications), "UInt64Value", "types.UInt64Value", 1) + `,`,
		`MaxClients:` + strings.Replace(fmt.Sprintf("%v", this.MaxClients), "UInt64Value", "types.UInt64Value", 1) + `,`,
		`MaxEndDevices:` + strings.Replace(fmt.Sprintf("%v", this.MaxEndDevices), "UInt64Value", "types.UInt64Value", 1) + `,`,
		`MaxGateways:` + strings.Replace(fmt.Sprintf("%v", this.MaxGateways), "UInt64Value", "types.UInt64Value", 1) + `,`,
		`MaxOrganizations:` + strings.Replace(fmt.Sprintf("%v", this.MaxOrganizations), "UInt64Value", "types.UInt64Value", 1) + `,`,
		`MaxUsers:` + strings.Replace(fmt.Sprintf("%v", this.MaxUsers), "UInt64Value", "types.UInt64Value", 1) + `,`,
		`Configuration:` + strings.Replace(fmt.Sprintf("%v", this.Configuration), "Configuration", "Configuration", 1) + `,`,
		`Billing:` + strings.Replace(fmt.Sprintf("%v", this.Billing), "Billing", "Billing", 1) + `,`,
		`BillingIdentifiers:` + strings.Replace(fmt.Sprintf("%v", this.BillingIdentifiers), "BillingIdentifiers", "BillingIdentifiers", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Tenants) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTenants := "[]*Tenant{"
	for _, f := range this.Tenants {
		repeatedStringForTenants += strings.Replace(f.String(), "Tenant", "Tenant", 1) + ","
	}
	repeatedStringForTenants += "}"
	s := strings.Join([]string{`&Tenants{`,
		`Tenants:` + repeatedStringForTenants + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTenantRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTenantRequest{`,
		`TenantIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.TenantIdentifiers), "TenantIdentifiers", "TenantIdentifiers", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListTenantsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListTenantsRequest{`,
		`FieldMask:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`Order:` + fmt.Sprintf("%v", this.Order) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Page:` + fmt.Sprintf("%v", this.Page) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateTenantRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateTenantRequest{`,
		`Tenant:` + strings.Replace(strings.Replace(this.Tenant.String(), "Tenant", "Tenant", 1), `&`, ``, 1) + `,`,
		`InitialUser:` + strings.Replace(fmt.Sprintf("%v", this.InitialUser), "User", "ttnpb.User", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateTenantRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateTenantRequest{`,
		`Tenant:` + strings.Replace(strings.Replace(this.Tenant.String(), "Tenant", "Tenant", 1), `&`, ``, 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTenantIdentifiersForEndDeviceEUIsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTenantIdentifiersForEndDeviceEUIsRequest{`,
		`JoinEUI:` + fmt.Sprintf("%v", this.JoinEUI) + `,`,
		`DevEUI:` + fmt.Sprintf("%v", this.DevEUI) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTenantIdentifiersForGatewayEUIRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTenantIdentifiersForGatewayEUIRequest{`,
		`EUI:` + fmt.Sprintf("%v", this.EUI) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTenantIdentifiersForBillingIdentifiersRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTenantIdentifiersForBillingIdentifiersRequest{`,
		`BillingIdentifiers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.BillingIdentifiers), "BillingIdentifiers", "BillingIdentifiers", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetTenantRegistryTotalsRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetTenantRegistryTotalsRequest{`,
		`TenantIdentifiers:` + strings.Replace(fmt.Sprintf("%v", this.TenantIdentifiers), "TenantIdentifiers", "TenantIdentifiers", 1) + `,`,
		`FieldMask:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.FieldMask), "FieldMask", "types.FieldMask", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TenantRegistryTotals) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TenantRegistryTotals{`,
		`Applications:` + fmt.Sprintf("%v", this.Applications) + `,`,
		`Clients:` + fmt.Sprintf("%v", this.Clients) + `,`,
		`EndDevices:` + fmt.Sprintf("%v", this.EndDevices) + `,`,
		`Gateways:` + fmt.Sprintf("%v", this.Gateways) + `,`,
		`Organizations:` + fmt.Sprintf("%v", this.Organizations) + `,`,
		`Users:` + fmt.Sprintf("%v", this.Users) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTenant(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Tenant) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tenant: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tenant: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TenantIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attributes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Attributes == nil {
				m.Attributes = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTenant
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTenant
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTenant
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTenant
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTenant
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTenant
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTenant
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTenant(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTenant
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Attributes[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContactInfo = append(m.ContactInfo, &ttnpb.ContactInfo{})
			if err := m.ContactInfo[len(m.ContactInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= ttnpb.State(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Capabilities", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Capabilities.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxApplications", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxApplications == nil {
				m.MaxApplications = &types.UInt64Value{}
			}
			if err := m.MaxApplications.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxClients", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxClients == nil {
				m.MaxClients = &types.UInt64Value{}
			}
			if err := m.MaxClients.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxEndDevices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxEndDevices == nil {
				m.MaxEndDevices = &types.UInt64Value{}
			}
			if err := m.MaxEndDevices.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxGateways", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxGateways == nil {
				m.MaxGateways = &types.UInt64Value{}
			}
			if err := m.MaxGateways.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxOrganizations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxOrganizations == nil {
				m.MaxOrganizations = &types.UInt64Value{}
			}
			if err := m.MaxOrganizations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUsers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MaxUsers == nil {
				m.MaxUsers = &types.UInt64Value{}
			}
			if err := m.MaxUsers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Configuration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Configuration == nil {
				m.Configuration = &Configuration{}
			}
			if err := m.Configuration.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Billing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Billing == nil {
				m.Billing = &Billing{}
			}
			if err := m.Billing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BillingIdentifiers == nil {
				m.BillingIdentifiers = &BillingIdentifiers{}
			}
			if err := m.BillingIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Tenants) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tenants: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tenants: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tenants = append(m.Tenants, &Tenant{})
			if err := m.Tenants[len(m.Tenants)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTenantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTenantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTenantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TenantIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListTenantsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListTenantsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListTenantsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTenantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTenantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTenantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tenant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InitialUser == nil {
				m.InitialUser = &ttnpb.User{}
			}
			if err := m.InitialUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateTenantRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateTenantRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateTenantRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tenant", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tenant.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTenantIdentifiersForEndDeviceEUIsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTenantIdentifiersForEndDeviceEUIsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTenantIdentifiersForEndDeviceEUIsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.JoinEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DevEUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DevEUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTenantIdentifiersForGatewayEUIRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTenantIdentifiersForGatewayEUIRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTenantIdentifiersForGatewayEUIRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EUI", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EUI.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTenantIdentifiersForBillingIdentifiersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTenantIdentifiersForBillingIdentifiersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTenantIdentifiersForBillingIdentifiersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BillingIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BillingIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTenantRegistryTotalsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTenantRegistryTotalsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTenantRegistryTotalsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TenantIdentifiers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TenantIdentifiers == nil {
				m.TenantIdentifiers = &TenantIdentifiers{}
			}
			if err := m.TenantIdentifiers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldMask", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTenant
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTenant
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FieldMask.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TenantRegistryTotals) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TenantRegistryTotals: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TenantRegistryTotals: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applications", wireType)
			}
			m.Applications = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Applications |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Clients", wireType)
			}
			m.Clients = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Clients |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndDevices", wireType)
			}
			m.EndDevices = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndDevices |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gateways", wireType)
			}
			m.Gateways = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gateways |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Organizations", wireType)
			}
			m.Organizations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Organizations |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Users", wireType)
			}
			m.Users = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Users |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTenant(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTenant
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTenant(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTenant
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTenant
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTenant
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTenant
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTenant
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTenant        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTenant          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTenant = fmt.Errorf("proto: unexpected end of group")
)
