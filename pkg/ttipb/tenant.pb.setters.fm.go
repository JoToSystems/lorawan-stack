// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package ttipb

import (
	fmt "fmt"
	time "time"

	types "github.com/gogo/protobuf/types"
	ttnpb "go.thethings.network/lorawan-stack/v3/pkg/ttnpb"
	go_thethings_network_lorawan_stack_v3_pkg_types "go.thethings.network/lorawan-stack/v3/pkg/types"
)

func (dst *Tenant) SetFields(src *Tenant, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "ids":
			if len(subs) > 0 {
				var newDst, newSrc *TenantIdentifiers
				if src != nil {
					newSrc = &src.TenantIdentifiers
				}
				newDst = &dst.TenantIdentifiers
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.TenantIdentifiers = src.TenantIdentifiers
				} else {
					var zero TenantIdentifiers
					dst.TenantIdentifiers = zero
				}
			}
		case "created_at":
			if len(subs) > 0 {
				return fmt.Errorf("'created_at' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.CreatedAt = src.CreatedAt
			} else {
				var zero time.Time
				dst.CreatedAt = zero
			}
		case "updated_at":
			if len(subs) > 0 {
				return fmt.Errorf("'updated_at' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.UpdatedAt = src.UpdatedAt
			} else {
				var zero time.Time
				dst.UpdatedAt = zero
			}
		case "name":
			if len(subs) > 0 {
				return fmt.Errorf("'name' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Name = src.Name
			} else {
				var zero string
				dst.Name = zero
			}
		case "description":
			if len(subs) > 0 {
				return fmt.Errorf("'description' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Description = src.Description
			} else {
				var zero string
				dst.Description = zero
			}
		case "attributes":
			if len(subs) > 0 {
				return fmt.Errorf("'attributes' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Attributes = src.Attributes
			} else {
				dst.Attributes = nil
			}
		case "contact_info":
			if len(subs) > 0 {
				return fmt.Errorf("'contact_info' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.ContactInfo = src.ContactInfo
			} else {
				dst.ContactInfo = nil
			}
		case "max_applications":
			if len(subs) > 0 {
				return fmt.Errorf("'max_applications' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.MaxApplications = src.MaxApplications
			} else {
				dst.MaxApplications = nil
			}
		case "max_clients":
			if len(subs) > 0 {
				return fmt.Errorf("'max_clients' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.MaxClients = src.MaxClients
			} else {
				dst.MaxClients = nil
			}
		case "max_end_devices":
			if len(subs) > 0 {
				return fmt.Errorf("'max_end_devices' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.MaxEndDevices = src.MaxEndDevices
			} else {
				dst.MaxEndDevices = nil
			}
		case "max_gateways":
			if len(subs) > 0 {
				return fmt.Errorf("'max_gateways' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.MaxGateways = src.MaxGateways
			} else {
				dst.MaxGateways = nil
			}
		case "max_organizations":
			if len(subs) > 0 {
				return fmt.Errorf("'max_organizations' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.MaxOrganizations = src.MaxOrganizations
			} else {
				dst.MaxOrganizations = nil
			}
		case "max_users":
			if len(subs) > 0 {
				return fmt.Errorf("'max_users' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.MaxUsers = src.MaxUsers
			} else {
				dst.MaxUsers = nil
			}
		case "state":
			if len(subs) > 0 {
				return fmt.Errorf("'state' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.State = src.State
			} else {
				var zero ttnpb.State
				dst.State = zero
			}
		case "capabilities":
			if len(subs) > 0 {
				return fmt.Errorf("'capabilities' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Capabilities = src.Capabilities
			} else {
				var zero types.Struct
				dst.Capabilities = zero
			}
		case "configuration":
			if len(subs) > 0 {
				var newDst, newSrc *Configuration
				if (src == nil || src.Configuration == nil) && dst.Configuration == nil {
					continue
				}
				if src != nil {
					newSrc = src.Configuration
				}
				if dst.Configuration != nil {
					newDst = dst.Configuration
				} else {
					newDst = &Configuration{}
					dst.Configuration = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Configuration = src.Configuration
				} else {
					dst.Configuration = nil
				}
			}
		case "billing":
			if len(subs) > 0 {
				var newDst, newSrc *Billing
				if (src == nil || src.Billing == nil) && dst.Billing == nil {
					continue
				}
				if src != nil {
					newSrc = src.Billing
				}
				if dst.Billing != nil {
					newDst = dst.Billing
				} else {
					newDst = &Billing{}
					dst.Billing = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Billing = src.Billing
				} else {
					dst.Billing = nil
				}
			}
		case "billing_identifiers":
			if len(subs) > 0 {
				var newDst, newSrc *BillingIdentifiers
				if (src == nil || src.BillingIdentifiers == nil) && dst.BillingIdentifiers == nil {
					continue
				}
				if src != nil {
					newSrc = src.BillingIdentifiers
				}
				if dst.BillingIdentifiers != nil {
					newDst = dst.BillingIdentifiers
				} else {
					newDst = &BillingIdentifiers{}
					dst.BillingIdentifiers = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.BillingIdentifiers = src.BillingIdentifiers
				} else {
					dst.BillingIdentifiers = nil
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *Tenants) SetFields(src *Tenants, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "tenants":
			if len(subs) > 0 {
				return fmt.Errorf("'tenants' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Tenants = src.Tenants
			} else {
				dst.Tenants = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *GetTenantRequest) SetFields(src *GetTenantRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "tenant_ids":
			if len(subs) > 0 {
				var newDst, newSrc *TenantIdentifiers
				if src != nil {
					newSrc = &src.TenantIdentifiers
				}
				newDst = &dst.TenantIdentifiers
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.TenantIdentifiers = src.TenantIdentifiers
				} else {
					var zero TenantIdentifiers
					dst.TenantIdentifiers = zero
				}
			}
		case "field_mask":
			if len(subs) > 0 {
				return fmt.Errorf("'field_mask' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FieldMask = src.FieldMask
			} else {
				var zero types.FieldMask
				dst.FieldMask = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *ListTenantsRequest) SetFields(src *ListTenantsRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "field_mask":
			if len(subs) > 0 {
				return fmt.Errorf("'field_mask' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FieldMask = src.FieldMask
			} else {
				var zero types.FieldMask
				dst.FieldMask = zero
			}
		case "order":
			if len(subs) > 0 {
				return fmt.Errorf("'order' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Order = src.Order
			} else {
				var zero string
				dst.Order = zero
			}
		case "limit":
			if len(subs) > 0 {
				return fmt.Errorf("'limit' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Limit = src.Limit
			} else {
				var zero uint32
				dst.Limit = zero
			}
		case "page":
			if len(subs) > 0 {
				return fmt.Errorf("'page' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Page = src.Page
			} else {
				var zero uint32
				dst.Page = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *CreateTenantRequest) SetFields(src *CreateTenantRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "tenant":
			if len(subs) > 0 {
				var newDst, newSrc *Tenant
				if src != nil {
					newSrc = &src.Tenant
				}
				newDst = &dst.Tenant
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Tenant = src.Tenant
				} else {
					var zero Tenant
					dst.Tenant = zero
				}
			}
		case "initial_user":
			if len(subs) > 0 {
				return fmt.Errorf("'initial_user' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.InitialUser = src.InitialUser
			} else {
				dst.InitialUser = nil
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *UpdateTenantRequest) SetFields(src *UpdateTenantRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "tenant":
			if len(subs) > 0 {
				var newDst, newSrc *Tenant
				if src != nil {
					newSrc = &src.Tenant
				}
				newDst = &dst.Tenant
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.Tenant = src.Tenant
				} else {
					var zero Tenant
					dst.Tenant = zero
				}
			}
		case "field_mask":
			if len(subs) > 0 {
				return fmt.Errorf("'field_mask' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FieldMask = src.FieldMask
			} else {
				var zero types.FieldMask
				dst.FieldMask = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *GetTenantIdentifiersForEndDeviceEUIsRequest) SetFields(src *GetTenantIdentifiersForEndDeviceEUIsRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "join_eui":
			if len(subs) > 0 {
				return fmt.Errorf("'join_eui' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.JoinEUI = src.JoinEUI
			} else {
				var zero go_thethings_network_lorawan_stack_v3_pkg_types.EUI64
				dst.JoinEUI = zero
			}
		case "dev_eui":
			if len(subs) > 0 {
				return fmt.Errorf("'dev_eui' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.DevEUI = src.DevEUI
			} else {
				var zero go_thethings_network_lorawan_stack_v3_pkg_types.EUI64
				dst.DevEUI = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *GetTenantIdentifiersForGatewayEUIRequest) SetFields(src *GetTenantIdentifiersForGatewayEUIRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "eui":
			if len(subs) > 0 {
				return fmt.Errorf("'eui' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.EUI = src.EUI
			} else {
				var zero go_thethings_network_lorawan_stack_v3_pkg_types.EUI64
				dst.EUI = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *GetTenantIdentifiersForBillingIdentifiersRequest) SetFields(src *GetTenantIdentifiersForBillingIdentifiersRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "ids":
			if len(subs) > 0 {
				var newDst, newSrc *BillingIdentifiers
				if src != nil {
					newSrc = &src.BillingIdentifiers
				}
				newDst = &dst.BillingIdentifiers
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.BillingIdentifiers = src.BillingIdentifiers
				} else {
					var zero BillingIdentifiers
					dst.BillingIdentifiers = zero
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *GetTenantRegistryTotalsRequest) SetFields(src *GetTenantRegistryTotalsRequest, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "tenant_ids":
			if len(subs) > 0 {
				var newDst, newSrc *TenantIdentifiers
				if (src == nil || src.TenantIdentifiers == nil) && dst.TenantIdentifiers == nil {
					continue
				}
				if src != nil {
					newSrc = src.TenantIdentifiers
				}
				if dst.TenantIdentifiers != nil {
					newDst = dst.TenantIdentifiers
				} else {
					newDst = &TenantIdentifiers{}
					dst.TenantIdentifiers = newDst
				}
				if err := newDst.SetFields(newSrc, subs...); err != nil {
					return err
				}
			} else {
				if src != nil {
					dst.TenantIdentifiers = src.TenantIdentifiers
				} else {
					dst.TenantIdentifiers = nil
				}
			}
		case "field_mask":
			if len(subs) > 0 {
				return fmt.Errorf("'field_mask' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.FieldMask = src.FieldMask
			} else {
				var zero types.FieldMask
				dst.FieldMask = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (dst *TenantRegistryTotals) SetFields(src *TenantRegistryTotals, paths ...string) error {
	for name, subs := range _processPaths(paths) {
		switch name {
		case "applications":
			if len(subs) > 0 {
				return fmt.Errorf("'applications' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Applications = src.Applications
			} else {
				var zero uint64
				dst.Applications = zero
			}
		case "clients":
			if len(subs) > 0 {
				return fmt.Errorf("'clients' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Clients = src.Clients
			} else {
				var zero uint64
				dst.Clients = zero
			}
		case "end_devices":
			if len(subs) > 0 {
				return fmt.Errorf("'end_devices' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.EndDevices = src.EndDevices
			} else {
				var zero uint64
				dst.EndDevices = zero
			}
		case "gateways":
			if len(subs) > 0 {
				return fmt.Errorf("'gateways' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Gateways = src.Gateways
			} else {
				var zero uint64
				dst.Gateways = zero
			}
		case "organizations":
			if len(subs) > 0 {
				return fmt.Errorf("'organizations' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Organizations = src.Organizations
			} else {
				var zero uint64
				dst.Organizations = zero
			}
		case "users":
			if len(subs) > 0 {
				return fmt.Errorf("'users' has no subfields, but %s were specified", subs)
			}
			if src != nil {
				dst.Users = src.Users
			} else {
				var zero uint64
				dst.Users = zero
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}
