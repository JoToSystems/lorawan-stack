// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lorawan-stack/api/tti/billing.proto

package ttipb

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	golang_proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Billing struct {
	// Types that are valid to be assigned to Provider:
	//	*Billing_Stripe_
	//	*Billing_AWSSaaSMarketplace_
	Provider             isBilling_Provider `protobuf_oneof:"provider"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *Billing) Reset()      { *m = Billing{} }
func (*Billing) ProtoMessage() {}
func (*Billing) Descriptor() ([]byte, []int) {
	return fileDescriptor_3178902b489b8bbb, []int{0}
}
func (m *Billing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Billing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Billing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Billing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Billing.Merge(m, src)
}
func (m *Billing) XXX_Size() int {
	return m.Size()
}
func (m *Billing) XXX_DiscardUnknown() {
	xxx_messageInfo_Billing.DiscardUnknown(m)
}

var xxx_messageInfo_Billing proto.InternalMessageInfo

type isBilling_Provider interface {
	isBilling_Provider()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type Billing_Stripe_ struct {
	Stripe *Billing_Stripe `protobuf:"bytes,17,opt,name=stripe,proto3,oneof" json:"stripe,omitempty"`
}
type Billing_AWSSaaSMarketplace_ struct {
	AWSSaaSMarketplace *Billing_AWSSaaSMarketplace `protobuf:"bytes,18,opt,name=aws_saas_marketplace,json=awsSaasMarketplace,proto3,oneof" json:"aws_saas_marketplace,omitempty"`
}

func (*Billing_Stripe_) isBilling_Provider()             {}
func (*Billing_AWSSaaSMarketplace_) isBilling_Provider() {}

func (m *Billing) GetProvider() isBilling_Provider {
	if m != nil {
		return m.Provider
	}
	return nil
}

func (m *Billing) GetStripe() *Billing_Stripe {
	if x, ok := m.GetProvider().(*Billing_Stripe_); ok {
		return x.Stripe
	}
	return nil
}

func (m *Billing) GetAWSSaaSMarketplace() *Billing_AWSSaaSMarketplace {
	if x, ok := m.GetProvider().(*Billing_AWSSaaSMarketplace_); ok {
		return x.AWSSaaSMarketplace
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Billing) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Billing_Stripe_)(nil),
		(*Billing_AWSSaaSMarketplace_)(nil),
	}
}

type Billing_Stripe struct {
	CustomerID           string   `protobuf:"bytes,1,opt,name=customer_id,json=customerId,proto3" json:"customer_id,omitempty"`
	PlanID               string   `protobuf:"bytes,2,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
	SubscriptionID       string   `protobuf:"bytes,3,opt,name=subscription_id,json=subscriptionId,proto3" json:"subscription_id,omitempty"`
	SubscriptionItemID   string   `protobuf:"bytes,4,opt,name=subscription_item_id,json=subscriptionItemId,proto3" json:"subscription_item_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Billing_Stripe) Reset()      { *m = Billing_Stripe{} }
func (*Billing_Stripe) ProtoMessage() {}
func (*Billing_Stripe) Descriptor() ([]byte, []int) {
	return fileDescriptor_3178902b489b8bbb, []int{0, 0}
}
func (m *Billing_Stripe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Billing_Stripe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Billing_Stripe.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Billing_Stripe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Billing_Stripe.Merge(m, src)
}
func (m *Billing_Stripe) XXX_Size() int {
	return m.Size()
}
func (m *Billing_Stripe) XXX_DiscardUnknown() {
	xxx_messageInfo_Billing_Stripe.DiscardUnknown(m)
}

var xxx_messageInfo_Billing_Stripe proto.InternalMessageInfo

func (m *Billing_Stripe) GetCustomerID() string {
	if m != nil {
		return m.CustomerID
	}
	return ""
}

func (m *Billing_Stripe) GetPlanID() string {
	if m != nil {
		return m.PlanID
	}
	return ""
}

func (m *Billing_Stripe) GetSubscriptionID() string {
	if m != nil {
		return m.SubscriptionID
	}
	return ""
}

func (m *Billing_Stripe) GetSubscriptionItemID() string {
	if m != nil {
		return m.SubscriptionItemID
	}
	return ""
}

type Billing_AWSSaaSMarketplace struct {
	CustomerIdentifier   string   `protobuf:"bytes,1,opt,name=customer_identifier,json=customerIdentifier,proto3" json:"customer_identifier,omitempty"`
	ProductCode          string   `protobuf:"bytes,2,opt,name=product_code,json=productCode,proto3" json:"product_code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Billing_AWSSaaSMarketplace) Reset()      { *m = Billing_AWSSaaSMarketplace{} }
func (*Billing_AWSSaaSMarketplace) ProtoMessage() {}
func (*Billing_AWSSaaSMarketplace) Descriptor() ([]byte, []int) {
	return fileDescriptor_3178902b489b8bbb, []int{0, 1}
}
func (m *Billing_AWSSaaSMarketplace) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Billing_AWSSaaSMarketplace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Billing_AWSSaaSMarketplace.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Billing_AWSSaaSMarketplace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Billing_AWSSaaSMarketplace.Merge(m, src)
}
func (m *Billing_AWSSaaSMarketplace) XXX_Size() int {
	return m.Size()
}
func (m *Billing_AWSSaaSMarketplace) XXX_DiscardUnknown() {
	xxx_messageInfo_Billing_AWSSaaSMarketplace.DiscardUnknown(m)
}

var xxx_messageInfo_Billing_AWSSaaSMarketplace proto.InternalMessageInfo

func (m *Billing_AWSSaaSMarketplace) GetCustomerIdentifier() string {
	if m != nil {
		return m.CustomerIdentifier
	}
	return ""
}

func (m *Billing_AWSSaaSMarketplace) GetProductCode() string {
	if m != nil {
		return m.ProductCode
	}
	return ""
}

func init() {
	proto.RegisterType((*Billing)(nil), "tti.lorawan.v3.Billing")
	golang_proto.RegisterType((*Billing)(nil), "tti.lorawan.v3.Billing")
	proto.RegisterType((*Billing_Stripe)(nil), "tti.lorawan.v3.Billing.Stripe")
	golang_proto.RegisterType((*Billing_Stripe)(nil), "tti.lorawan.v3.Billing.Stripe")
	proto.RegisterType((*Billing_AWSSaaSMarketplace)(nil), "tti.lorawan.v3.Billing.AWSSaaSMarketplace")
	golang_proto.RegisterType((*Billing_AWSSaaSMarketplace)(nil), "tti.lorawan.v3.Billing.AWSSaaSMarketplace")
}

func init() {
	proto.RegisterFile("lorawan-stack/api/tti/billing.proto", fileDescriptor_3178902b489b8bbb)
}
func init() {
	golang_proto.RegisterFile("lorawan-stack/api/tti/billing.proto", fileDescriptor_3178902b489b8bbb)
}

var fileDescriptor_3178902b489b8bbb = []byte{
	// 582 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0x3d, 0x4c, 0xdb, 0x40,
	0x18, 0x86, 0xef, 0x00, 0x85, 0xf6, 0xa8, 0xa0, 0x5c, 0x69, 0x45, 0x23, 0xf5, 0x03, 0xb5, 0x0b,
	0x42, 0x8a, 0x2d, 0x15, 0xa9, 0x62, 0xc5, 0x64, 0xc0, 0x43, 0xd5, 0xca, 0x19, 0x2a, 0x75, 0x89,
	0x2e, 0xf6, 0x61, 0x4e, 0x71, 0x7c, 0xd6, 0xf9, 0x92, 0x94, 0x4e, 0x74, 0x63, 0xec, 0xd8, 0xb1,
	0x4b, 0x25, 0x46, 0x46, 0x46, 0x46, 0x86, 0x0e, 0x8c, 0x4c, 0x08, 0x9f, 0x17, 0x46, 0x46, 0xd4,
	0xa9, 0x8a, 0x63, 0x9a, 0xa4, 0xb4, 0xdb, 0xfd, 0x3c, 0xcf, 0xeb, 0x4f, 0xaf, 0x7c, 0xe4, 0x55,
	0x24, 0x15, 0xeb, 0xb3, 0xb8, 0x96, 0x6a, 0xe6, 0xb7, 0x6d, 0x96, 0x08, 0x5b, 0x6b, 0x61, 0xb7,
	0x44, 0x14, 0x89, 0x38, 0xb4, 0x12, 0x25, 0xb5, 0xa4, 0xf3, 0x5a, 0x0b, 0xab, 0x04, 0xad, 0xde,
	0x46, 0x75, 0x2b, 0x14, 0x7a, 0xaf, 0xdb, 0xb2, 0x7c, 0xd9, 0xb1, 0x79, 0xdc, 0x93, 0xfb, 0x89,
	0x92, 0x9f, 0xf6, 0xed, 0x02, 0xf6, 0x6b, 0x21, 0x8f, 0x6b, 0x3d, 0x16, 0x89, 0x80, 0x69, 0x6e,
	0xdf, 0x5b, 0x0c, 0x23, 0xab, 0xb5, 0xb1, 0x88, 0x50, 0x86, 0x72, 0x28, 0xb7, 0xba, 0xbb, 0xc5,
	0xae, 0xd8, 0x14, 0xab, 0x21, 0xfe, 0xf2, 0xe7, 0x0c, 0x99, 0x75, 0x86, 0x33, 0xd1, 0x4d, 0x52,
	0x49, 0xb5, 0x12, 0x09, 0x5f, 0x5e, 0x5c, 0xc5, 0x6b, 0x73, 0xaf, 0xc1, 0x9a, 0x1c, 0xcf, 0x2a,
	0x41, 0xab, 0x51, 0x50, 0x3b, 0xc8, 0x2b, 0x79, 0xda, 0x23, 0x4b, 0xac, 0x9f, 0x36, 0x53, 0xc6,
	0xd2, 0x66, 0x87, 0xa9, 0x36, 0xd7, 0x49, 0xc4, 0x7c, 0xbe, 0x4c, 0x8b, 0x9c, 0xf5, 0xff, 0xe5,
	0x6c, 0x7d, 0x68, 0x34, 0x18, 0x6b, 0xbc, 0x1d, 0x19, 0xce, 0x33, 0x73, 0xb9, 0x42, 0xef, 0x9f,
	0xef, 0x20, 0x8f, 0xb2, 0x7e, 0xda, 0x60, 0x2c, 0x1d, 0x3b, 0xad, 0x7e, 0x99, 0x22, 0x95, 0xe1,
	0x30, 0xf4, 0x0d, 0x99, 0xf3, 0xbb, 0xa9, 0x96, 0x1d, 0xae, 0x9a, 0x22, 0x58, 0xc6, 0xab, 0x78,
	0xed, 0xa1, 0xf3, 0xf4, 0x97, 0x33, 0xa3, 0xa6, 0x1e, 0x63, 0x73, 0xb9, 0x42, 0xb6, 0xcb, 0x5b,
	0xb7, 0xee, 0x91, 0x3b, 0xd2, 0x0d, 0xe8, 0x3a, 0x99, 0x4d, 0x22, 0x16, 0x0f, 0x9c, 0xa9, 0xc2,
	0x59, 0x1c, 0x39, 0x95, 0xf7, 0x11, 0x8b, 0xdd, 0xba, 0x57, 0x19, 0x10, 0x6e, 0x40, 0x1d, 0xb2,
	0x90, 0x76, 0x5b, 0xa9, 0xaf, 0x44, 0xa2, 0x85, 0x2c, 0x9c, 0xe9, 0xc2, 0x79, 0x3e, 0x72, 0xe6,
	0x1b, 0x63, 0x84, 0x5b, 0xf7, 0xe6, 0xc7, 0x0d, 0x37, 0xa0, 0xef, 0xc8, 0xd2, 0x64, 0x86, 0xe6,
	0x9d, 0x41, 0xd0, 0x4c, 0x11, 0xf4, 0x62, 0x14, 0x44, 0x27, 0x82, 0x34, 0xef, 0xb8, 0x75, 0x8f,
	0xa6, 0x7f, 0x9f, 0x05, 0xd5, 0xcf, 0xe4, 0x1f, 0x7d, 0xd1, 0x4d, 0xf2, 0x64, 0xac, 0x0e, 0x1e,
	0x6b, 0xb1, 0x2b, 0xb8, 0x2a, 0x6b, 0x99, 0x2d, 0xbf, 0xe2, 0xd1, 0x51, 0x11, 0x77, 0x08, 0x5d,
	0x27, 0x8f, 0x12, 0x25, 0x83, 0xae, 0xaf, 0x9b, 0xbe, 0x0c, 0x78, 0xd9, 0xca, 0x1f, 0x65, 0xae,
	0xbc, 0xdc, 0x96, 0x01, 0x77, 0x16, 0xc8, 0x83, 0x44, 0xc9, 0x9e, 0x08, 0xb8, 0xa2, 0xd3, 0xb7,
	0x0e, 0x76, 0x7e, 0xe0, 0xb3, 0x0c, 0xf0, 0x79, 0x06, 0xf8, 0x22, 0x03, 0x74, 0x95, 0x01, 0xba,
	0xce, 0x00, 0xdd, 0x64, 0x80, 0x6e, 0x33, 0xc0, 0x07, 0x06, 0xf0, 0xa1, 0x01, 0x74, 0x64, 0x00,
	0x1f, 0x1b, 0x40, 0x27, 0x06, 0xd0, 0xa9, 0x01, 0x74, 0x66, 0x00, 0x9f, 0x1b, 0xc0, 0x17, 0x06,
	0xd0, 0x95, 0x01, 0x7c, 0x6d, 0x00, 0xdd, 0x18, 0xc0, 0xb7, 0x06, 0xd0, 0x41, 0x0e, 0xe8, 0x30,
	0x07, 0xfc, 0x35, 0x07, 0xf4, 0x2d, 0x07, 0xfc, 0x3d, 0x07, 0x74, 0x94, 0x03, 0x3a, 0xce, 0x01,
	0x9f, 0xe4, 0x80, 0x4f, 0x73, 0xc0, 0x1f, 0xed, 0x50, 0x5a, 0x7a, 0x8f, 0xeb, 0x3d, 0x11, 0x87,
	0xa9, 0x15, 0x73, 0xdd, 0x97, 0xaa, 0x6d, 0x4f, 0xbe, 0xc0, 0xde, 0x86, 0x9d, 0xb4, 0xc3, 0xc1,
	0x23, 0x4c, 0x5a, 0xad, 0x4a, 0xf1, 0xf7, 0x6f, 0xfc, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xb7, 0xf7,
	0x37, 0xb4, 0xa6, 0x03, 0x00, 0x00,
}

func (this *Billing) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Billing)
	if !ok {
		that2, ok := that.(Billing)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.Provider == nil {
		if this.Provider != nil {
			return false
		}
	} else if this.Provider == nil {
		return false
	} else if !this.Provider.Equal(that1.Provider) {
		return false
	}
	return true
}
func (this *Billing_Stripe_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Billing_Stripe_)
	if !ok {
		that2, ok := that.(Billing_Stripe_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Stripe.Equal(that1.Stripe) {
		return false
	}
	return true
}
func (this *Billing_AWSSaaSMarketplace_) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Billing_AWSSaaSMarketplace_)
	if !ok {
		that2, ok := that.(Billing_AWSSaaSMarketplace_)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.AWSSaaSMarketplace.Equal(that1.AWSSaaSMarketplace) {
		return false
	}
	return true
}
func (this *Billing_Stripe) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Billing_Stripe)
	if !ok {
		that2, ok := that.(Billing_Stripe)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CustomerID != that1.CustomerID {
		return false
	}
	if this.PlanID != that1.PlanID {
		return false
	}
	if this.SubscriptionID != that1.SubscriptionID {
		return false
	}
	if this.SubscriptionItemID != that1.SubscriptionItemID {
		return false
	}
	return true
}
func (this *Billing_AWSSaaSMarketplace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Billing_AWSSaaSMarketplace)
	if !ok {
		that2, ok := that.(Billing_AWSSaaSMarketplace)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CustomerIdentifier != that1.CustomerIdentifier {
		return false
	}
	if this.ProductCode != that1.ProductCode {
		return false
	}
	return true
}
func (m *Billing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Billing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Billing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Provider != nil {
		{
			size := m.Provider.Size()
			i -= size
			if _, err := m.Provider.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Billing_Stripe_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Billing_Stripe_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Stripe != nil {
		{
			size, err := m.Stripe.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBilling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	return len(dAtA) - i, nil
}
func (m *Billing_AWSSaaSMarketplace_) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Billing_AWSSaaSMarketplace_) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AWSSaaSMarketplace != nil {
		{
			size, err := m.AWSSaaSMarketplace.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBilling(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	return len(dAtA) - i, nil
}
func (m *Billing_Stripe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Billing_Stripe) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Billing_Stripe) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SubscriptionItemID) > 0 {
		i -= len(m.SubscriptionItemID)
		copy(dAtA[i:], m.SubscriptionItemID)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.SubscriptionItemID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SubscriptionID) > 0 {
		i -= len(m.SubscriptionID)
		copy(dAtA[i:], m.SubscriptionID)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.SubscriptionID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PlanID) > 0 {
		i -= len(m.PlanID)
		copy(dAtA[i:], m.PlanID)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.PlanID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CustomerID) > 0 {
		i -= len(m.CustomerID)
		copy(dAtA[i:], m.CustomerID)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.CustomerID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Billing_AWSSaaSMarketplace) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Billing_AWSSaaSMarketplace) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Billing_AWSSaaSMarketplace) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ProductCode) > 0 {
		i -= len(m.ProductCode)
		copy(dAtA[i:], m.ProductCode)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.ProductCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CustomerIdentifier) > 0 {
		i -= len(m.CustomerIdentifier)
		copy(dAtA[i:], m.CustomerIdentifier)
		i = encodeVarintBilling(dAtA, i, uint64(len(m.CustomerIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBilling(dAtA []byte, offset int, v uint64) int {
	offset -= sovBilling(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedBilling(r randyBilling, easy bool) *Billing {
	this := &Billing{}
	oneofNumber_Provider := []int32{17, 18}[r.Intn(2)]
	switch oneofNumber_Provider {
	case 17:
		this.Provider = NewPopulatedBilling_Stripe_(r, easy)
	case 18:
		this.Provider = NewPopulatedBilling_AWSSaaSMarketplace_(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBilling_Stripe_(r randyBilling, easy bool) *Billing_Stripe_ {
	this := &Billing_Stripe_{}
	this.Stripe = NewPopulatedBilling_Stripe(r, easy)
	return this
}
func NewPopulatedBilling_AWSSaaSMarketplace_(r randyBilling, easy bool) *Billing_AWSSaaSMarketplace_ {
	this := &Billing_AWSSaaSMarketplace_{}
	this.AWSSaaSMarketplace = NewPopulatedBilling_AWSSaaSMarketplace(r, easy)
	return this
}
func NewPopulatedBilling_Stripe(r randyBilling, easy bool) *Billing_Stripe {
	this := &Billing_Stripe{}
	this.CustomerID = randStringBilling(r)
	this.PlanID = randStringBilling(r)
	this.SubscriptionID = randStringBilling(r)
	this.SubscriptionItemID = randStringBilling(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedBilling_AWSSaaSMarketplace(r randyBilling, easy bool) *Billing_AWSSaaSMarketplace {
	this := &Billing_AWSSaaSMarketplace{}
	this.CustomerIdentifier = randStringBilling(r)
	this.ProductCode = randStringBilling(r)
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyBilling interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneBilling(r randyBilling) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringBilling(r randyBilling) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneBilling(r)
	}
	return string(tmps)
}
func randUnrecognizedBilling(r randyBilling, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldBilling(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldBilling(dAtA []byte, r randyBilling, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateBilling(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateBilling(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateBilling(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateBilling(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateBilling(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateBilling(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateBilling(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(v&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Billing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Provider != nil {
		n += m.Provider.Size()
	}
	return n
}

func (m *Billing_Stripe_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stripe != nil {
		l = m.Stripe.Size()
		n += 2 + l + sovBilling(uint64(l))
	}
	return n
}
func (m *Billing_AWSSaaSMarketplace_) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AWSSaaSMarketplace != nil {
		l = m.AWSSaaSMarketplace.Size()
		n += 2 + l + sovBilling(uint64(l))
	}
	return n
}
func (m *Billing_Stripe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CustomerID)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.PlanID)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.SubscriptionID)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.SubscriptionItemID)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	return n
}

func (m *Billing_AWSSaaSMarketplace) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CustomerIdentifier)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	l = len(m.ProductCode)
	if l > 0 {
		n += 1 + l + sovBilling(uint64(l))
	}
	return n
}

func sovBilling(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBilling(x uint64) (n int) {
	return sovBilling((x << 1) ^ uint64((int64(x) >> 63)))
}
func (this *Billing) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Billing{`,
		`Provider:` + fmt.Sprintf("%v", this.Provider) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Billing_Stripe_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Billing_Stripe_{`,
		`Stripe:` + strings.Replace(fmt.Sprintf("%v", this.Stripe), "Billing_Stripe", "Billing_Stripe", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Billing_AWSSaaSMarketplace_) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Billing_AWSSaaSMarketplace_{`,
		`AWSSaaSMarketplace:` + strings.Replace(fmt.Sprintf("%v", this.AWSSaaSMarketplace), "Billing_AWSSaaSMarketplace", "Billing_AWSSaaSMarketplace", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Billing_Stripe) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Billing_Stripe{`,
		`CustomerID:` + fmt.Sprintf("%v", this.CustomerID) + `,`,
		`PlanID:` + fmt.Sprintf("%v", this.PlanID) + `,`,
		`SubscriptionID:` + fmt.Sprintf("%v", this.SubscriptionID) + `,`,
		`SubscriptionItemID:` + fmt.Sprintf("%v", this.SubscriptionItemID) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Billing_AWSSaaSMarketplace) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Billing_AWSSaaSMarketplace{`,
		`CustomerIdentifier:` + fmt.Sprintf("%v", this.CustomerIdentifier) + `,`,
		`ProductCode:` + fmt.Sprintf("%v", this.ProductCode) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBilling(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Billing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Billing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Billing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stripe", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Billing_Stripe{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Provider = &Billing_Stripe_{v}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AWSSaaSMarketplace", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &Billing_AWSSaaSMarketplace{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Provider = &Billing_AWSSaaSMarketplace_{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Billing_Stripe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Stripe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Stripe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlanID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubscriptionItemID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubscriptionItemID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Billing_AWSSaaSMarketplace) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AWSSaaSMarketplace: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AWSSaaSMarketplace: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomerIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomerIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBilling
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBilling
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBilling(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBilling
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBilling(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBilling
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBilling
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBilling
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBilling
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBilling
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBilling        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBilling          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBilling = fmt.Errorf("proto: unexpected end of group")
)
